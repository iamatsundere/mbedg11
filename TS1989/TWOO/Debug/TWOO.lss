
TWOO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ba0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000ba0  00000c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cb  0080007e  0080007e  00000c52  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001e2  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001a3  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000bbd  00000000  00000000  00001cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000524  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011ce  00000000  00000000  00002dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00003f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003bd  00000000  00000000  000040ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b04  00000000  00000000  000044a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000fc  00000000  00000000  00004fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  000050a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 34       	cpi	r26, 0x49	; 73
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
  8a:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Read2Nib>:
#define DDR_DATA	DDRD
*/

char Read2Nib(void){
	char HNib, LNib;
	DATA_O |=0xF0;
  92:	88 b3       	in	r24, 0x18	; 24
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	88 bb       	out	0x18, r24	; 24
	
	sbi(CTRL,EN); //enable	
  98:	c2 9a       	sbi	0x18, 2	; 24
	DDR_DATA &=0x0F;	
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	8f 70       	andi	r24, 0x0F	; 15
  9e:	87 bb       	out	0x17, r24	; 23
	HNib=DATA_I & 0xF0;
  a0:	86 b3       	in	r24, 0x16	; 22
	cbi(CTRL,EN); //disable
  a2:	c2 98       	cbi	0x18, 2	; 24
	
	sbi(CTRL,EN); //enable
  a4:	c2 9a       	sbi	0x18, 2	; 24
	LNib = DATA_I & 0xF0;
  a6:	96 b3       	in	r25, 0x16	; 22
	cbi(CTRL,EN); //disable
  a8:	c2 98       	cbi	0x18, 2	; 24
	LNib>>=4;
  aa:	92 95       	swap	r25
  ac:	9f 70       	andi	r25, 0x0F	; 15
	char HNib, LNib;
	DATA_O |=0xF0;
	
	sbi(CTRL,EN); //enable	
	DDR_DATA &=0x0F;	
	HNib=DATA_I & 0xF0;
  ae:	80 7f       	andi	r24, 0xF0	; 240
	sbi(CTRL,EN); //enable
	LNib = DATA_I & 0xF0;
	cbi(CTRL,EN); //disable
	LNib>>=4;
	return (HNib|LNib);
}
  b0:	89 2b       	or	r24, r25
  b2:	08 95       	ret

000000b4 <Write2Nib>:

void Write2Nib(uint8_t chr){

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;
  b4:	98 b3       	in	r25, 0x18	; 24
  b6:	9f 70       	andi	r25, 0x0F	; 15

	HNib=chr & 0xF0;
  b8:	28 2f       	mov	r18, r24
  ba:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;		
		
	DATA_O =(HNib |temp_data);	
  bc:	29 2b       	or	r18, r25
  be:	28 bb       	out	0x18, r18	; 24
	sbi(CTRL,EN); //enable
  c0:	c2 9a       	sbi	0x18, 2	; 24
	cbi(CTRL,EN); //disable	
  c2:	c2 98       	cbi	0x18, 2	; 24

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;		
  c4:	82 95       	swap	r24
  c6:	80 7f       	andi	r24, 0xF0	; 240
		
	DATA_O =(HNib |temp_data);	
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable	
	
	DATA_O =(LNib|temp_data);		
  c8:	98 2b       	or	r25, r24
  ca:	98 bb       	out	0x18, r25	; 24
	sbi(CTRL,EN); //enable
  cc:	c2 9a       	sbi	0x18, 2	; 24
	cbi(CTRL,EN); //disable
  ce:	c2 98       	cbi	0x18, 2	; 24
}
  d0:	08 95       	ret

000000d2 <Write8Bit>:

void Write8Bit(uint8_t chr){
	DATA_O=chr;   //out 8 bits to DATA Line
  d2:	88 bb       	out	0x18, r24	; 24
	sbi(CTRL,EN); //enable
  d4:	c2 9a       	sbi	0x18, 2	; 24
	cbi(CTRL,EN); //disable
  d6:	c2 98       	cbi	0x18, 2	; 24
}
  d8:	08 95       	ret

000000da <wait_LCD>:

void wait_LCD(void){	
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
			temp_val=Read2Nib();
			if (bit_is_clear(temp_val,7)) break;
  e8:	8e 01       	movw	r16, r28
  ea:	0f 5f       	subi	r16, 0xFF	; 255
  ec:	1f 4f       	sbci	r17, 0xFF	; 255
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
  ee:	c0 98       	cbi	0x18, 0	; 24
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
  f0:	c1 9a       	sbi	0x18, 1	; 24
			temp_val=Read2Nib();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <Read2Nib>
  f6:	89 83       	std	Y+1, r24	; 0x01
			if (bit_is_clear(temp_val,7)) break;
  f8:	f8 01       	movw	r30, r16
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	bc f3       	brlt	.-18     	; 0xee <wait_LCD+0x14>
		}
		cbi(CTRL,RW); //ready for next step	
 100:	c1 98       	cbi	0x18, 1	; 24
		DDR_DATA=0xFF;//Ready to Out		
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	87 bb       	out	0x17, r24	; 23
	#endif
	
	//_delay_ms(1);
	
}
 106:	0f 90       	pop	r0
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	08 95       	ret

00000112 <init_LCD>:


void init_LCD(void){
	DDR_CTRL=0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	87 bb       	out	0x17, r24	; 23
	DDR_DATA=0xFF;
 116:	87 bb       	out	0x17, r24	; 23
//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
 118:	c0 98       	cbi	0x18, 0	; 24
	cbi(CTRL, RW); // AVR->LCD
 11a:	c1 98       	cbi	0x18, 1	; 24
	cbi(CTRL, EN);
 11c:	c2 98       	cbi	0x18, 2	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x38);
		wait_LCD();
	#else
		sbi(CTRL,EN); //enable
 11e:	c2 9a       	sbi	0x18, 2	; 24
		sbi(DATA_O, 5); 
 120:	c5 9a       	sbi	0x18, 5	; 24
		cbi(CTRL,EN); //disable
 122:	c2 98       	cbi	0x18, 2	; 24
		wait_LCD();		
 124:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
		Write2Nib(0x28);//
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();	
 12e:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif
//Display control-------------------------------------------------------------------------	
	cbi(CTRL,RS); // the following data is COMMAND 
 132:	c0 98       	cbi	0x18, 0	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x0E);
		wait_LCD();
	#else
		Write2Nib(0x0C); //off cursor
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();			
 13a:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif
//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND 
 13e:	c0 98       	cbi	0x18, 0	; 24
	#ifdef LCD8BIT
		Write8Bit(0x06);
		wait_LCD();
	#else
		Write2Nib(0x06);
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();
 146:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif
}
 14a:	08 95       	ret

0000014c <home_LCD>:

void home_LCD(void){
	cbi(CTRL,RS); // the following data is COMMAND 
 14c:	c0 98       	cbi	0x18, 0	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x02);
		wait_LCD();	
	#else
		Write2Nib(0x02);
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();
 154:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif	
}
 158:	08 95       	ret

0000015a <move_LCD>:
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
	cbi(CTRL,RS); // the following data is COMMAND
 15a:	c0 98       	cbi	0x18, 0	; 24
		wait_LCD();
	#endif	
}
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
 15c:	82 95       	swap	r24
 15e:	88 0f       	add	r24, r24
 160:	88 0f       	add	r24, r24
 162:	80 7c       	andi	r24, 0xC0	; 192
 164:	86 0f       	add	r24, r22
	cbi(CTRL,RS); // the following data is COMMAND
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
 166:	81 5c       	subi	r24, 0xC1	; 193
 168:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();
 16c:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif	
}
 170:	08 95       	ret

00000172 <clr_LCD>:

void clr_LCD(void){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 172:	c0 98       	cbi	0x18, 0	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();	
 17a:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
		
	#endif	
}
 17e:	08 95       	ret

00000180 <putChar_LCD>:

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
 180:	c0 9a       	sbi	0x18, 0	; 24
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
 182:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();	
 186:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif		
}
 18a:	08 95       	ret

0000018c <print_LCD>:

void print_LCD(char* str){
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
 194:	88 81       	ld	r24, Y
 196:	88 23       	and	r24, r24
 198:	51 f0       	breq	.+20     	; 0x1ae <print_LCD+0x22>
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	0e 94 c0 00 	call	0x180	; 0x180 <putChar_LCD>
 1a0:	1f 5f       	subi	r17, 0xFF	; 255
 1a2:	fe 01       	movw	r30, r28
 1a4:	e1 0f       	add	r30, r17
 1a6:	f1 1d       	adc	r31, r1
 1a8:	80 81       	ld	r24, Z
 1aa:	88 23       	and	r24, r24
 1ac:	b9 f7       	brne	.-18     	; 0x19c <print_LCD+0x10>
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	08 95       	ret

000001b6 <TWI_Init>:
//END FOR MASTER USE********************************************


//Initialize TWI in Master mode
void TWI_Init(void){
	TWSR=0x00; //Prescaler=1
 1b6:	11 b8       	out	0x01, r1	; 1
	TWBR=_100K;
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	80 b9       	out	0x00, r24	; 0
	TWAR=(Device_Addr<<1)+GENERAL_CALL;
 1bc:	80 91 7d 00 	lds	r24, 0x007D
 1c0:	88 0f       	add	r24, r24
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	82 b9       	out	0x02, r24	; 2
	TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWIE); //ready for Slave mode: Ack is set, TWI is ENABLE and interrupt is ENABLE	
 1c6:	85 e4       	ldi	r24, 0x45	; 69
 1c8:	86 bf       	out	0x36, r24	; 54
}
 1ca:	08 95       	ret

000001cc <TWI_Master_Send_array>:


//---MASTER transmitter : array-------------------------------------------------------
uint8_t TWI_Master_Send_array(uint8_t Addr, uint8_t Data[], uint8_t len){
	cbi(TWCR, TWIE);
 1cc:	96 b7       	in	r25, 0x36	; 54
 1ce:	9e 7f       	andi	r25, 0xFE	; 254
 1d0:	96 bf       	out	0x36, r25	; 54
	//Send START Condition---------------------
	TWCR=TWI_START;
 1d2:	94 ea       	ldi	r25, 0xA4	; 164
 1d4:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 1d6:	06 b6       	in	r0, 0x36	; 54
 1d8:	07 fe       	sbrs	r0, 7
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <TWI_Master_Send_array+0xa>
	if((TWSR&0xF8) !=_START_Sent){TWI_Init(); return (TWSR&0xF8);}; //START send error, escape anyway
 1dc:	91 b1       	in	r25, 0x01	; 1
 1de:	98 7f       	andi	r25, 0xF8	; 248
 1e0:	98 30       	cpi	r25, 0x08	; 8
 1e2:	29 f0       	breq	.+10     	; 0x1ee <TWI_Master_Send_array+0x22>
 1e4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 1e8:	81 b1       	in	r24, 0x01	; 1
 1ea:	88 7f       	andi	r24, 0xF8	; 248
 1ec:	08 95       	ret
	
	//Send Device Address---------------------
	TWDR=(Addr<<1)+TWI_W; //repare address on TWDR,+W (send procedure)
 1ee:	88 0f       	add	r24, r24
 1f0:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 1f6:	06 b6       	in	r0, 0x36	; 54
 1f8:	07 fe       	sbrs	r0, 7
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <TWI_Master_Send_array+0x2a>
	if((TWSR&0xF8) !=_SLA_W_ACK){TWI_Init(); return (TWSR&0xF8);}; //addresssend error, escape anyway
 1fc:	81 b1       	in	r24, 0x01	; 1
 1fe:	88 7f       	andi	r24, 0xF8	; 248
 200:	88 31       	cpi	r24, 0x18	; 24
 202:	31 f4       	brne	.+12     	; 0x210 <TWI_Master_Send_array+0x44>
	
	//send DATA array---------------------
	for (int i=0; i<len; i++){ //repeat the sending proccess until reach the end of data
 204:	24 2f       	mov	r18, r20
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	12 16       	cp	r1, r18
 20a:	13 06       	cpc	r1, r19
 20c:	34 f0       	brlt	.+12     	; 0x21a <TWI_Master_Send_array+0x4e>
 20e:	1d c0       	rjmp	.+58     	; 0x24a <TWI_Master_Send_array+0x7e>
	
	//Send Device Address---------------------
	TWDR=(Addr<<1)+TWI_W; //repare address on TWDR,+W (send procedure)
	TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	if((TWSR&0xF8) !=_SLA_W_ACK){TWI_Init(); return (TWSR&0xF8);}; //addresssend error, escape anyway
 210:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 214:	81 b1       	in	r24, 0x01	; 1
 216:	88 7f       	andi	r24, 0xF8	; 248
 218:	08 95       	ret
 21a:	e6 2f       	mov	r30, r22
 21c:	f7 2f       	mov	r31, r23
	
	//send DATA array---------------------
	for (int i=0; i<len; i++){ //repeat the sending proccess until reach the end of data
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
		TWDR=Data[i]; //repare Data on TWDR
		TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
 222:	54 e8       	ldi	r21, 0x84	; 132
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	if((TWSR&0xF8) !=_SLA_W_ACK){TWI_Init(); return (TWSR&0xF8);}; //addresssend error, escape anyway
	
	//send DATA array---------------------
	for (int i=0; i<len; i++){ //repeat the sending proccess until reach the end of data
		TWDR=Data[i]; //repare Data on TWDR
 224:	41 91       	ld	r20, Z+
 226:	43 b9       	out	0x03, r20	; 3
		TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
 228:	56 bf       	out	0x36, r21	; 54
		while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 22a:	06 b6       	in	r0, 0x36	; 54
 22c:	07 fe       	sbrs	r0, 7
 22e:	fd cf       	rjmp	.-6      	; 0x22a <TWI_Master_Send_array+0x5e>
		if((TWSR&0xF8) !=_DATA_ACK) { TWI_Init(); return (TWSR&0xF8);}; //data send error, escape anyway	
 230:	41 b1       	in	r20, 0x01	; 1
 232:	48 7f       	andi	r20, 0xF8	; 248
 234:	48 32       	cpi	r20, 0x28	; 40
 236:	29 f0       	breq	.+10     	; 0x242 <TWI_Master_Send_array+0x76>
 238:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 23c:	81 b1       	in	r24, 0x01	; 1
 23e:	88 7f       	andi	r24, 0xF8	; 248
 240:	08 95       	ret
	TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	if((TWSR&0xF8) !=_SLA_W_ACK){TWI_Init(); return (TWSR&0xF8);}; //addresssend error, escape anyway
	
	//send DATA array---------------------
	for (int i=0; i<len; i++){ //repeat the sending proccess until reach the end of data
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	82 17       	cp	r24, r18
 246:	93 07       	cpc	r25, r19
 248:	6c f3       	brlt	.-38     	; 0x224 <TWI_Master_Send_array+0x58>
		TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
		while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
		if((TWSR&0xF8) !=_DATA_ACK) { TWI_Init(); return (TWSR&0xF8);}; //data send error, escape anyway	
	}	
	//send the STOP condition
	TWCR=TWI_STOP;	
 24a:	84 e9       	ldi	r24, 0x94	; 148
 24c:	86 bf       	out	0x36, r24	; 54
	TWI_Init();
 24e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
	return 0;
 252:	80 e0       	ldi	r24, 0x00	; 0
}
 254:	08 95       	ret

00000256 <TWI_Master_Read_array>:

//---MASTER Receiver: array
uint8_t TWI_Master_Read_array(uint8_t Addr, uint8_t rData[], uint8_t len){	
 256:	1f 93       	push	r17
	uint8_t Status;
	cbi(TWCR, TWIE);
 258:	96 b7       	in	r25, 0x36	; 54
 25a:	9e 7f       	andi	r25, 0xFE	; 254
 25c:	96 bf       	out	0x36, r25	; 54
	//Send START Condition---------------------
	TWCR=TWI_START;
 25e:	94 ea       	ldi	r25, 0xA4	; 164
 260:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 262:	06 b6       	in	r0, 0x36	; 54
 264:	07 fe       	sbrs	r0, 7
 266:	fd cf       	rjmp	.-6      	; 0x262 <TWI_Master_Read_array+0xc>
	Status=TWSR&0xF8;
 268:	11 b1       	in	r17, 0x01	; 1
 26a:	18 7f       	andi	r17, 0xF8	; 248
	if(Status !=_START_Sent) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //START send error, escape anyway	
 26c:	18 30       	cpi	r17, 0x08	; 8
 26e:	29 f0       	breq	.+10     	; 0x27a <TWI_Master_Read_array+0x24>
 270:	84 e9       	ldi	r24, 0x94	; 148
 272:	86 bf       	out	0x36, r24	; 54
 274:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 278:	4f c0       	rjmp	.+158    	; 0x318 <TWI_Master_Read_array+0xc2>
	
	//Send Device Address---------------------
	TWDR=(Addr<<1)+TWI_R; //repare address on TWDR,+R (send procedure)
 27a:	88 0f       	add	r24, r24
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT;  //start send address by cleaning TWINT, not send ACK
 280:	84 e8       	ldi	r24, 0x84	; 132
 282:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 284:	06 b6       	in	r0, 0x36	; 54
 286:	07 fe       	sbrs	r0, 7
 288:	fd cf       	rjmp	.-6      	; 0x284 <TWI_Master_Read_array+0x2e>
	Status=TWSR&0xF8;
 28a:	11 b1       	in	r17, 0x01	; 1
 28c:	18 7f       	andi	r17, 0xF8	; 248
	if(Status !=_SLA_R_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //addresssend error, escape anyway
 28e:	10 34       	cpi	r17, 0x40	; 64
 290:	41 f4       	brne	.+16     	; 0x2a2 <TWI_Master_Read_array+0x4c>

	//Get DATA array---------------------
	for (int i=0; i<len-1; i++){
 292:	24 2f       	mov	r18, r20
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	21 50       	subi	r18, 0x01	; 1
 298:	30 40       	sbci	r19, 0x00	; 0
 29a:	12 16       	cp	r1, r18
 29c:	13 06       	cpc	r1, r19
 29e:	34 f0       	brlt	.+12     	; 0x2ac <TWI_Master_Read_array+0x56>
 2a0:	1f c0       	rjmp	.+62     	; 0x2e0 <TWI_Master_Read_array+0x8a>
	//Send Device Address---------------------
	TWDR=(Addr<<1)+TWI_R; //repare address on TWDR,+R (send procedure)
	TWCR=TWI_Clear_TWINT;  //start send address by cleaning TWINT, not send ACK
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	Status=TWSR&0xF8;
	if(Status !=_SLA_R_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //addresssend error, escape anyway
 2a2:	84 e9       	ldi	r24, 0x94	; 148
 2a4:	86 bf       	out	0x36, r24	; 54
 2a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 2aa:	36 c0       	rjmp	.+108    	; 0x318 <TWI_Master_Read_array+0xc2>
 2ac:	fb 01       	movw	r30, r22

	//Get DATA array---------------------
	for (int i=0; i<len-1; i++){
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
		TWCR=TWI_Read_ACK; //start read data by cleaning TWINT, set ACK after read each byte
 2b2:	a4 ec       	ldi	r26, 0xC4	; 196
 2b4:	a6 bf       	out	0x36, r26	; 54
		while ((TWCR & 0x80)==0x00)
 2b6:	06 b6       	in	r0, 0x36	; 54
 2b8:	07 fc       	sbrc	r0, 7
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <TWI_Master_Read_array+0x70>
		Status=TWSR&0xF8; 
 2bc:	11 b1       	in	r17, 0x01	; 1
 2be:	18 7f       	andi	r17, 0xF8	; 248
	if(Status !=_SLA_R_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //addresssend error, escape anyway

	//Get DATA array---------------------
	for (int i=0; i<len-1; i++){
		TWCR=TWI_Read_ACK; //start read data by cleaning TWINT, set ACK after read each byte
		while ((TWCR & 0x80)==0x00)
 2c0:	06 b6       	in	r0, 0x36	; 54
 2c2:	07 fe       	sbrs	r0, 7
 2c4:	fb cf       	rjmp	.-10     	; 0x2bc <TWI_Master_Read_array+0x66>
		Status=TWSR&0xF8; 
		if (Status!=_DATA_Rec_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;};	
 2c6:	10 35       	cpi	r17, 0x50	; 80
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <TWI_Master_Read_array+0x7e>
 2ca:	84 e9       	ldi	r24, 0x94	; 148
 2cc:	86 bf       	out	0x36, r24	; 54
 2ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 2d2:	22 c0       	rjmp	.+68     	; 0x318 <TWI_Master_Read_array+0xc2>
		rData[i]=TWDR;
 2d4:	53 b1       	in	r21, 0x03	; 3
 2d6:	51 93       	st	Z+, r21
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	Status=TWSR&0xF8;
	if(Status !=_SLA_R_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //addresssend error, escape anyway

	//Get DATA array---------------------
	for (int i=0; i<len-1; i++){
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	82 17       	cp	r24, r18
 2dc:	93 07       	cpc	r25, r19
 2de:	54 f3       	brlt	.-44     	; 0x2b4 <TWI_Master_Read_array+0x5e>
		if (Status!=_DATA_Rec_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;};	
		rData[i]=TWDR;
	}
	
	//get last byte---------------------
	TWCR=TWI_Clear_TWINT; //start read data by cleaning TWINT, set NOT ACK
 2e0:	84 e8       	ldi	r24, 0x84	; 132
 2e2:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80)==0x00)
 2e4:	06 b6       	in	r0, 0x36	; 54
 2e6:	07 fc       	sbrc	r0, 7
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <TWI_Master_Read_array+0x9e>
	Status=TWSR&0xF8;
 2ea:	11 b1       	in	r17, 0x01	; 1
 2ec:	18 7f       	andi	r17, 0xF8	; 248
		rData[i]=TWDR;
	}
	
	//get last byte---------------------
	TWCR=TWI_Clear_TWINT; //start read data by cleaning TWINT, set NOT ACK
	while ((TWCR & 0x80)==0x00)
 2ee:	06 b6       	in	r0, 0x36	; 54
 2f0:	07 fe       	sbrs	r0, 7
 2f2:	fb cf       	rjmp	.-10     	; 0x2ea <TWI_Master_Read_array+0x94>
	Status=TWSR&0xF8;
	if (Status !=_DATA_Rec_NACK) {TWCR=TWI_STOP; TWI_Init(); return Status;};
 2f4:	18 35       	cpi	r17, 0x58	; 88
 2f6:	29 f0       	breq	.+10     	; 0x302 <TWI_Master_Read_array+0xac>
 2f8:	84 e9       	ldi	r24, 0x94	; 148
 2fa:	86 bf       	out	0x36, r24	; 54
 2fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 300:	0b c0       	rjmp	.+22     	; 0x318 <TWI_Master_Read_array+0xc2>
	rData[len-1]=TWDR;
 302:	83 b1       	in	r24, 0x03	; 3
 304:	64 0f       	add	r22, r20
 306:	71 1d       	adc	r23, r1
 308:	fb 01       	movw	r30, r22
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	80 83       	st	Z, r24
		
	//send the STOP condition
	TWCR=TWI_STOP;
 30e:	84 e9       	ldi	r24, 0x94	; 148
 310:	86 bf       	out	0x36, r24	; 54
	TWI_Init();
 312:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
	return 0;
 316:	10 e0       	ldi	r17, 0x00	; 0
}
 318:	81 2f       	mov	r24, r17
 31a:	1f 91       	pop	r17
 31c:	08 95       	ret

0000031e <__vector_19>:



//---------------------------------------------SLAVE INTERRUPT------------------------------
ISR(TWI_vect){
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
	uint8_t Status;
	Status=TWSR;
 330:	81 b1       	in	r24, 0x01	; 1
	
	//**********************SLAVE RECEIVER MODE******************
	switch (Status){
 332:	88 39       	cpi	r24, 0x98	; 152
 334:	09 f4       	brne	.+2      	; 0x338 <__vector_19+0x1a>
 336:	66 c0       	rjmp	.+204    	; 0x404 <__vector_19+0xe6>
 338:	89 39       	cpi	r24, 0x99	; 153
 33a:	80 f4       	brcc	.+32     	; 0x35c <__vector_19+0x3e>
 33c:	80 38       	cpi	r24, 0x80	; 128
 33e:	61 f1       	breq	.+88     	; 0x398 <__vector_19+0x7a>
 340:	81 38       	cpi	r24, 0x81	; 129
 342:	30 f4       	brcc	.+12     	; 0x350 <__vector_19+0x32>
 344:	80 36       	cpi	r24, 0x60	; 96
 346:	01 f1       	breq	.+64     	; 0x388 <__vector_19+0x6a>
 348:	80 37       	cpi	r24, 0x70	; 112
 34a:	09 f0       	breq	.+2      	; 0x34e <__vector_19+0x30>
 34c:	a6 c0       	rjmp	.+332    	; 0x49a <__vector_19+0x17c>
 34e:	42 c0       	rjmp	.+132    	; 0x3d4 <__vector_19+0xb6>
 350:	88 38       	cpi	r24, 0x88	; 136
 352:	89 f1       	breq	.+98     	; 0x3b6 <__vector_19+0x98>
 354:	80 39       	cpi	r24, 0x90	; 144
 356:	09 f0       	breq	.+2      	; 0x35a <__vector_19+0x3c>
 358:	a0 c0       	rjmp	.+320    	; 0x49a <__vector_19+0x17c>
 35a:	45 c0       	rjmp	.+138    	; 0x3e6 <__vector_19+0xc8>
 35c:	80 3b       	cpi	r24, 0xB0	; 176
 35e:	09 f4       	brne	.+2      	; 0x362 <__vector_19+0x44>
 360:	81 c0       	rjmp	.+258    	; 0x464 <__vector_19+0x146>
 362:	81 3b       	cpi	r24, 0xB1	; 177
 364:	38 f4       	brcc	.+14     	; 0x374 <__vector_19+0x56>
 366:	80 3a       	cpi	r24, 0xA0	; 160
 368:	09 f4       	brne	.+2      	; 0x36c <__vector_19+0x4e>
 36a:	5b c0       	rjmp	.+182    	; 0x422 <__vector_19+0x104>
 36c:	88 3a       	cpi	r24, 0xA8	; 168
 36e:	09 f0       	breq	.+2      	; 0x372 <__vector_19+0x54>
 370:	94 c0       	rjmp	.+296    	; 0x49a <__vector_19+0x17c>
 372:	5b c0       	rjmp	.+182    	; 0x42a <__vector_19+0x10c>
 374:	80 3c       	cpi	r24, 0xC0	; 192
 376:	09 f4       	brne	.+2      	; 0x37a <__vector_19+0x5c>
 378:	81 c0       	rjmp	.+258    	; 0x47c <__vector_19+0x15e>
 37a:	88 3c       	cpi	r24, 0xC8	; 200
 37c:	09 f4       	brne	.+2      	; 0x380 <__vector_19+0x62>
 37e:	82 c0       	rjmp	.+260    	; 0x484 <__vector_19+0x166>
 380:	88 3b       	cpi	r24, 0xB8	; 184
 382:	09 f0       	breq	.+2      	; 0x386 <__vector_19+0x68>
 384:	8a c0       	rjmp	.+276    	; 0x49a <__vector_19+0x17c>
 386:	62 c0       	rjmp	.+196    	; 0x44c <__vector_19+0x12e>
	case OWN_ADDRESS_MATCH:			//0x60
		SLAVE_mode=0;
 388:	10 92 80 00 	sts	0x0080, r1
		Rec_Num=0;
 38c:	10 92 7f 00 	sts	0x007F, r1
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 390:	86 b7       	in	r24, 0x36	; 54
 392:	80 6c       	ori	r24, 0xC0	; 192
 394:	86 bf       	out	0x36, r24	; 54
		break;	
 396:	81 c0       	rjmp	.+258    	; 0x49a <__vector_19+0x17c>
	case OWN_DATA_Rec_ACK:			//0x80
		SLAVE_buff[Rec_Num++]=TWDR;
 398:	80 91 7f 00 	lds	r24, 0x007F
 39c:	93 b1       	in	r25, 0x03	; 3
 39e:	e1 e8       	ldi	r30, 0x81	; 129
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	e8 0f       	add	r30, r24
 3a4:	f1 1d       	adc	r31, r1
 3a6:	90 83       	st	Z, r25
 3a8:	8f 5f       	subi	r24, 0xFF	; 255
 3aa:	80 93 7f 00 	sts	0x007F, r24
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 3ae:	86 b7       	in	r24, 0x36	; 54
 3b0:	80 6c       	ori	r24, 0xC0	; 192
 3b2:	86 bf       	out	0x36, r24	; 54
		break;
 3b4:	72 c0       	rjmp	.+228    	; 0x49a <__vector_19+0x17c>
	case OWN_DATA_Rec_NACK:			//0x88
		SLAVE_buff[Rec_Num++]=TWDR;
 3b6:	80 91 7f 00 	lds	r24, 0x007F
 3ba:	93 b1       	in	r25, 0x03	; 3
 3bc:	e1 e8       	ldi	r30, 0x81	; 129
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	e8 0f       	add	r30, r24
 3c2:	f1 1d       	adc	r31, r1
 3c4:	90 83       	st	Z, r25
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	80 93 7f 00 	sts	0x007F, r24
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 3cc:	86 b7       	in	r24, 0x36	; 54
 3ce:	80 6c       	ori	r24, 0xC0	; 192
 3d0:	86 bf       	out	0x36, r24	; 54
		break;
 3d2:	63 c0       	rjmp	.+198    	; 0x49a <__vector_19+0x17c>
	case GENERAL_MATCH:				//0x70
		SLAVE_mode=1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 80 00 	sts	0x0080, r24
		Rec_Num=0;
 3da:	10 92 7f 00 	sts	0x007F, r1
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 3de:	86 b7       	in	r24, 0x36	; 54
 3e0:	80 6c       	ori	r24, 0xC0	; 192
 3e2:	86 bf       	out	0x36, r24	; 54
		break;
 3e4:	5a c0       	rjmp	.+180    	; 0x49a <__vector_19+0x17c>
	case GENERAL_DATA_Rec_ACK:		//0x90
		SLAVE_buff[Rec_Num++]=TWDR;
 3e6:	80 91 7f 00 	lds	r24, 0x007F
 3ea:	93 b1       	in	r25, 0x03	; 3
 3ec:	e1 e8       	ldi	r30, 0x81	; 129
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	e8 0f       	add	r30, r24
 3f2:	f1 1d       	adc	r31, r1
 3f4:	90 83       	st	Z, r25
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 7f 00 	sts	0x007F, r24
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 3fc:	86 b7       	in	r24, 0x36	; 54
 3fe:	80 6c       	ori	r24, 0xC0	; 192
 400:	86 bf       	out	0x36, r24	; 54
		break;
 402:	4b c0       	rjmp	.+150    	; 0x49a <__vector_19+0x17c>
	case GENERAL_DATA_Rec_NACK:		//0x98
		SLAVE_buff[Rec_Num++]=TWDR;
 404:	80 91 7f 00 	lds	r24, 0x007F
 408:	93 b1       	in	r25, 0x03	; 3
 40a:	e1 e8       	ldi	r30, 0x81	; 129
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	e8 0f       	add	r30, r24
 410:	f1 1d       	adc	r31, r1
 412:	90 83       	st	Z, r25
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	80 93 7f 00 	sts	0x007F, r24
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 41a:	86 b7       	in	r24, 0x36	; 54
 41c:	80 6c       	ori	r24, 0xC0	; 192
 41e:	86 bf       	out	0x36, r24	; 54
		break;	
 420:	3c c0       	rjmp	.+120    	; 0x49a <__vector_19+0x17c>
	case  STOP_Rec: 				//0xA0
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 422:	86 b7       	in	r24, 0x36	; 54
 424:	80 6c       	ori	r24, 0xC0	; 192
 426:	86 bf       	out	0x36, r24	; 54
		break;
 428:	38 c0       	rjmp	.+112    	; 0x49a <__vector_19+0x17c>
	//**********************END SLAVE RECEIVER MODE**************
	
	
	//--------------------SLAVE TRANSMITTER MODE----------------
	case ADDRESS_R_MATCH: 	// 0xA8
		Tran_Num++;
 42a:	80 91 7e 00 	lds	r24, 0x007E
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	80 93 7e 00 	sts	0x007E, r24
		TWDR=SLAVE_wData[Tran_Num];
 434:	80 91 7e 00 	lds	r24, 0x007E
 438:	e5 ee       	ldi	r30, 0xE5	; 229
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	e8 0f       	add	r30, r24
 43e:	f1 1d       	adc	r31, r1
 440:	80 81       	ld	r24, Z
 442:	83 b9       	out	0x03, r24	; 3
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK		
 444:	86 b7       	in	r24, 0x36	; 54
 446:	80 6c       	ori	r24, 0xC0	; 192
 448:	86 bf       	out	0x36, r24	; 54
		break;
 44a:	27 c0       	rjmp	.+78     	; 0x49a <__vector_19+0x17c>
	case DATA_Sent_ACK:  	//0xB8
		TWDR=SLAVE_wData[Tran_Num];
 44c:	80 91 7e 00 	lds	r24, 0x007E
 450:	e5 ee       	ldi	r30, 0xE5	; 229
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	e8 0f       	add	r30, r24
 456:	f1 1d       	adc	r31, r1
 458:	80 81       	ld	r24, Z
 45a:	83 b9       	out	0x03, r24	; 3
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK
 45c:	86 b7       	in	r24, 0x36	; 54
 45e:	80 6c       	ori	r24, 0xC0	; 192
 460:	86 bf       	out	0x36, r24	; 54
		break;
 462:	1b c0       	rjmp	.+54     	; 0x49a <__vector_19+0x17c>
	case LOST_R_MATCH: 	 	//0xB0
		TWDR=SLAVE_wData[Tran_Num];
 464:	80 91 7e 00 	lds	r24, 0x007E
 468:	e5 ee       	ldi	r30, 0xE5	; 229
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	e8 0f       	add	r30, r24
 46e:	f1 1d       	adc	r31, r1
 470:	80 81       	ld	r24, Z
 472:	83 b9       	out	0x03, r24	; 3
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK
 474:	86 b7       	in	r24, 0x36	; 54
 476:	80 6c       	ori	r24, 0xC0	; 192
 478:	86 bf       	out	0x36, r24	; 54
		break;
 47a:	0f c0       	rjmp	.+30     	; 0x49a <__vector_19+0x17c>
	case DATA_Sent_NACK: 	//0xC0
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK
 47c:	86 b7       	in	r24, 0x36	; 54
 47e:	80 6c       	ori	r24, 0xC0	; 192
 480:	86 bf       	out	0x36, r24	; 54
		break;
 482:	0b c0       	rjmp	.+22     	; 0x49a <__vector_19+0x17c>
	case DATA_Last_Sent_ACK: //0xC8
		TWDR=SLAVE_wData[Tran_Num];
 484:	80 91 7e 00 	lds	r24, 0x007E
 488:	e5 ee       	ldi	r30, 0xE5	; 229
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	e8 0f       	add	r30, r24
 48e:	f1 1d       	adc	r31, r1
 490:	80 81       	ld	r24, Z
 492:	83 b9       	out	0x03, r24	; 3
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK
 494:	86 b7       	in	r24, 0x36	; 54
 496:	80 6c       	ori	r24, 0xC0	; 192
 498:	86 bf       	out	0x36, r24	; 54
		break;
	//--------------------END SLAVE TRANSMITTER MODE------------
	default:
		break;
	}
}
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <main>:
#include <stdio.h>
#include "myLCD.h"
#include "myTWI.h"

//chuong trinh chinh
int main(void){
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	df 93       	push	r29
 4ba:	cf 93       	push	r28
 4bc:	00 d0       	rcall	.+0      	; 0x4be <main+0x12>
 4be:	00 d0       	rcall	.+0      	; 0x4c0 <main+0x14>
 4c0:	0f 92       	push	r0
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
	char dis[5];

	//PORT D la input va co dien tro keo len
	PORTD=0xFF; 
 4c6:	8f ef       	ldi	r24, 0xFF	; 255
 4c8:	82 bb       	out	0x12, r24	; 18
	DDRD=0x00;	
 4ca:	11 ba       	out	0x11, r1	; 17
	Device_Addr=PIND>>6; //xac dinh dia chi cua minh bang 2 chan PD7:PD6
 4cc:	80 b3       	in	r24, 0x10	; 16
 4ce:	82 95       	swap	r24
 4d0:	86 95       	lsr	r24
 4d2:	86 95       	lsr	r24
 4d4:	83 70       	andi	r24, 0x03	; 3
 4d6:	80 93 7d 00 	sts	0x007D, r24
	
	TWI_Init(); //khoi dong TWI
 4da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
	init_LCD(); //khoi dong LCD
 4de:	0e 94 89 00 	call	0x112	; 0x112 <init_LCD>
	clr_LCD();	
 4e2:	0e 94 b9 00 	call	0x172	; 0x172 <clr_LCD>
	sei(); 		//global interrupt	
 4e6:	78 94       	sei
	
	//gan gia tri cho mang SLAVE_wDATA, du lieu se goi den Master neu duoc yeu cau
	for (int i=0; i<100; i++) SLAVE_wData[i]=i; 
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	25 ee       	ldi	r18, 0xE5	; 229
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	e8 0f       	add	r30, r24
 4f4:	f9 1f       	adc	r31, r25
 4f6:	80 83       	st	Z, r24
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	84 36       	cpi	r24, 0x64	; 100
 4fc:	91 05       	cpc	r25, r1
 4fe:	c1 f7       	brne	.-16     	; 0x4f0 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 500:	8f e4       	ldi	r24, 0x4F	; 79
 502:	93 ec       	ldi	r25, 0xC3	; 195
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <main+0x58>
 508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x5e>
 50a:	00 00       	nop
	_delay_ms(200);
	
	sprintf(dis,"%i", Device_Addr);
 50c:	20 91 7d 00 	lds	r18, 0x007D
 510:	00 d0       	rcall	.+0      	; 0x512 <main+0x66>
 512:	00 d0       	rcall	.+0      	; 0x514 <main+0x68>
 514:	00 d0       	rcall	.+0      	; 0x516 <main+0x6a>
 516:	ed b7       	in	r30, 0x3d	; 61
 518:	fe b7       	in	r31, 0x3e	; 62
 51a:	31 96       	adiw	r30, 0x01	; 1
 51c:	8e 01       	movw	r16, r28
 51e:	0f 5f       	subi	r16, 0xFF	; 255
 520:	1f 4f       	sbci	r17, 0xFF	; 255
 522:	ad b7       	in	r26, 0x3d	; 61
 524:	be b7       	in	r27, 0x3e	; 62
 526:	12 96       	adiw	r26, 0x02	; 2
 528:	1c 93       	st	X, r17
 52a:	0e 93       	st	-X, r16
 52c:	11 97       	sbiw	r26, 0x01	; 1
 52e:	80 e6       	ldi	r24, 0x60	; 96
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	93 83       	std	Z+3, r25	; 0x03
 534:	82 83       	std	Z+2, r24	; 0x02
 536:	24 83       	std	Z+4, r18	; 0x04
 538:	15 82       	std	Z+5, r1	; 0x05
 53a:	0e 94 ed 02 	call	0x5da	; 0x5da <sprintf>
	print_LCD("Device addr: ");
 53e:	8d b7       	in	r24, 0x3d	; 61
 540:	9e b7       	in	r25, 0x3e	; 62
 542:	06 96       	adiw	r24, 0x06	; 6
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	9e bf       	out	0x3e, r25	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	8d bf       	out	0x3d, r24	; 61
 54e:	83 e6       	ldi	r24, 0x63	; 99
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 c6 00 	call	0x18c	; 0x18c <print_LCD>
	print_LCD(dis);
 556:	c8 01       	movw	r24, r16
 558:	0e 94 c6 00 	call	0x18c	; 0x18c <print_LCD>
	move_LCD(2,1);
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	0e 94 ad 00 	call	0x15a	; 0x15a <move_LCD>
	print_LCD("Sent data: ");
 564:	81 e7       	ldi	r24, 0x71	; 113
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 c6 00 	call	0x18c	; 0x18c <print_LCD>
	
	while(1){		
		//in len LCD du lieu cuoi cung goi den Master
		sprintf(dis,"%i", SLAVE_wData[Tran_Num]); 
 56c:	0f 2e       	mov	r0, r31
 56e:	f5 ee       	ldi	r31, 0xE5	; 229
 570:	ef 2e       	mov	r14, r31
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	ff 2e       	mov	r15, r31
 576:	f0 2d       	mov	r31, r0
 578:	8e 01       	movw	r16, r28
 57a:	0f 5f       	subi	r16, 0xFF	; 255
 57c:	1f 4f       	sbci	r17, 0xFF	; 255
 57e:	0f 2e       	mov	r0, r31
 580:	f0 e6       	ldi	r31, 0x60	; 96
 582:	cf 2e       	mov	r12, r31
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	df 2e       	mov	r13, r31
 588:	f0 2d       	mov	r31, r0
 58a:	80 91 7e 00 	lds	r24, 0x007E
 58e:	f7 01       	movw	r30, r14
 590:	e8 0f       	add	r30, r24
 592:	f1 1d       	adc	r31, r1
 594:	80 81       	ld	r24, Z
 596:	00 d0       	rcall	.+0      	; 0x598 <main+0xec>
 598:	00 d0       	rcall	.+0      	; 0x59a <main+0xee>
 59a:	00 d0       	rcall	.+0      	; 0x59c <main+0xf0>
 59c:	ed b7       	in	r30, 0x3d	; 61
 59e:	fe b7       	in	r31, 0x3e	; 62
 5a0:	31 96       	adiw	r30, 0x01	; 1
 5a2:	ad b7       	in	r26, 0x3d	; 61
 5a4:	be b7       	in	r27, 0x3e	; 62
 5a6:	12 96       	adiw	r26, 0x02	; 2
 5a8:	1c 93       	st	X, r17
 5aa:	0e 93       	st	-X, r16
 5ac:	11 97       	sbiw	r26, 0x01	; 1
 5ae:	d3 82       	std	Z+3, r13	; 0x03
 5b0:	c2 82       	std	Z+2, r12	; 0x02
 5b2:	84 83       	std	Z+4, r24	; 0x04
 5b4:	15 82       	std	Z+5, r1	; 0x05
 5b6:	0e 94 ed 02 	call	0x5da	; 0x5da <sprintf>
		move_LCD(2,12);			
 5ba:	8d b7       	in	r24, 0x3d	; 61
 5bc:	9e b7       	in	r25, 0x3e	; 62
 5be:	06 96       	adiw	r24, 0x06	; 6
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	9e bf       	out	0x3e, r25	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	8d bf       	out	0x3d, r24	; 61
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	6c e0       	ldi	r22, 0x0C	; 12
 5ce:	0e 94 ad 00 	call	0x15a	; 0x15a <move_LCD>
		print_LCD(dis);	
 5d2:	c8 01       	movw	r24, r16
 5d4:	0e 94 c6 00 	call	0x18c	; 0x18c <print_LCD>
 5d8:	d8 cf       	rjmp	.-80     	; 0x58a <main+0xde>

000005da <sprintf>:
 5da:	ae e0       	ldi	r26, 0x0E	; 14
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	e3 ef       	ldi	r30, 0xF3	; 243
 5e0:	f2 e0       	ldi	r31, 0x02	; 2
 5e2:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__prologue_saves__+0x1c>
 5e6:	0d 89       	ldd	r16, Y+21	; 0x15
 5e8:	1e 89       	ldd	r17, Y+22	; 0x16
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	8c 83       	std	Y+4, r24	; 0x04
 5ee:	1a 83       	std	Y+2, r17	; 0x02
 5f0:	09 83       	std	Y+1, r16	; 0x01
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	9f e7       	ldi	r25, 0x7F	; 127
 5f6:	9e 83       	std	Y+6, r25	; 0x06
 5f8:	8d 83       	std	Y+5, r24	; 0x05
 5fa:	9e 01       	movw	r18, r28
 5fc:	27 5e       	subi	r18, 0xE7	; 231
 5fe:	3f 4f       	sbci	r19, 0xFF	; 255
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	6f 89       	ldd	r22, Y+23	; 0x17
 606:	78 8d       	ldd	r23, Y+24	; 0x18
 608:	a9 01       	movw	r20, r18
 60a:	0e 94 10 03 	call	0x620	; 0x620 <vfprintf>
 60e:	ef 81       	ldd	r30, Y+7	; 0x07
 610:	f8 85       	ldd	r31, Y+8	; 0x08
 612:	e0 0f       	add	r30, r16
 614:	f1 1f       	adc	r31, r17
 616:	10 82       	st	Z, r1
 618:	2e 96       	adiw	r28, 0x0e	; 14
 61a:	e4 e0       	ldi	r30, 0x04	; 4
 61c:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__epilogue_restores__+0x1c>

00000620 <vfprintf>:
 620:	ac e0       	ldi	r26, 0x0C	; 12
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	e6 e1       	ldi	r30, 0x16	; 22
 626:	f3 e0       	ldi	r31, 0x03	; 3
 628:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__prologue_saves__>
 62c:	6c 01       	movw	r12, r24
 62e:	1b 01       	movw	r2, r22
 630:	8a 01       	movw	r16, r20
 632:	fc 01       	movw	r30, r24
 634:	17 82       	std	Z+7, r1	; 0x07
 636:	16 82       	std	Z+6, r1	; 0x06
 638:	83 81       	ldd	r24, Z+3	; 0x03
 63a:	81 ff       	sbrs	r24, 1
 63c:	d1 c1       	rjmp	.+930    	; 0x9e0 <__stack+0x181>
 63e:	2e 01       	movw	r4, r28
 640:	08 94       	sec
 642:	41 1c       	adc	r4, r1
 644:	51 1c       	adc	r5, r1
 646:	f6 01       	movw	r30, r12
 648:	93 81       	ldd	r25, Z+3	; 0x03
 64a:	f1 01       	movw	r30, r2
 64c:	93 fd       	sbrc	r25, 3
 64e:	85 91       	lpm	r24, Z+
 650:	93 ff       	sbrs	r25, 3
 652:	81 91       	ld	r24, Z+
 654:	1f 01       	movw	r2, r30
 656:	88 23       	and	r24, r24
 658:	09 f4       	brne	.+2      	; 0x65c <vfprintf+0x3c>
 65a:	be c1       	rjmp	.+892    	; 0x9d8 <__stack+0x179>
 65c:	85 32       	cpi	r24, 0x25	; 37
 65e:	39 f4       	brne	.+14     	; 0x66e <vfprintf+0x4e>
 660:	93 fd       	sbrc	r25, 3
 662:	85 91       	lpm	r24, Z+
 664:	93 ff       	sbrs	r25, 3
 666:	81 91       	ld	r24, Z+
 668:	1f 01       	movw	r2, r30
 66a:	85 32       	cpi	r24, 0x25	; 37
 66c:	29 f4       	brne	.+10     	; 0x678 <vfprintf+0x58>
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	b6 01       	movw	r22, r12
 672:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 676:	e7 cf       	rjmp	.-50     	; 0x646 <vfprintf+0x26>
 678:	ee 24       	eor	r14, r14
 67a:	ff 24       	eor	r15, r15
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	20 32       	cpi	r18, 0x20	; 32
 680:	b0 f4       	brcc	.+44     	; 0x6ae <vfprintf+0x8e>
 682:	8b 32       	cpi	r24, 0x2B	; 43
 684:	69 f0       	breq	.+26     	; 0x6a0 <vfprintf+0x80>
 686:	8c 32       	cpi	r24, 0x2C	; 44
 688:	28 f4       	brcc	.+10     	; 0x694 <vfprintf+0x74>
 68a:	80 32       	cpi	r24, 0x20	; 32
 68c:	51 f0       	breq	.+20     	; 0x6a2 <vfprintf+0x82>
 68e:	83 32       	cpi	r24, 0x23	; 35
 690:	71 f4       	brne	.+28     	; 0x6ae <vfprintf+0x8e>
 692:	0b c0       	rjmp	.+22     	; 0x6aa <vfprintf+0x8a>
 694:	8d 32       	cpi	r24, 0x2D	; 45
 696:	39 f0       	breq	.+14     	; 0x6a6 <vfprintf+0x86>
 698:	80 33       	cpi	r24, 0x30	; 48
 69a:	49 f4       	brne	.+18     	; 0x6ae <vfprintf+0x8e>
 69c:	21 60       	ori	r18, 0x01	; 1
 69e:	2c c0       	rjmp	.+88     	; 0x6f8 <vfprintf+0xd8>
 6a0:	22 60       	ori	r18, 0x02	; 2
 6a2:	24 60       	ori	r18, 0x04	; 4
 6a4:	29 c0       	rjmp	.+82     	; 0x6f8 <vfprintf+0xd8>
 6a6:	28 60       	ori	r18, 0x08	; 8
 6a8:	27 c0       	rjmp	.+78     	; 0x6f8 <vfprintf+0xd8>
 6aa:	20 61       	ori	r18, 0x10	; 16
 6ac:	25 c0       	rjmp	.+74     	; 0x6f8 <vfprintf+0xd8>
 6ae:	27 fd       	sbrc	r18, 7
 6b0:	2c c0       	rjmp	.+88     	; 0x70a <vfprintf+0xea>
 6b2:	38 2f       	mov	r19, r24
 6b4:	30 53       	subi	r19, 0x30	; 48
 6b6:	3a 30       	cpi	r19, 0x0A	; 10
 6b8:	98 f4       	brcc	.+38     	; 0x6e0 <vfprintf+0xc0>
 6ba:	26 ff       	sbrs	r18, 6
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <vfprintf+0xae>
 6be:	8e 2d       	mov	r24, r14
 6c0:	88 0f       	add	r24, r24
 6c2:	e8 2e       	mov	r14, r24
 6c4:	ee 0c       	add	r14, r14
 6c6:	ee 0c       	add	r14, r14
 6c8:	e8 0e       	add	r14, r24
 6ca:	e3 0e       	add	r14, r19
 6cc:	15 c0       	rjmp	.+42     	; 0x6f8 <vfprintf+0xd8>
 6ce:	8f 2d       	mov	r24, r15
 6d0:	88 0f       	add	r24, r24
 6d2:	f8 2e       	mov	r15, r24
 6d4:	ff 0c       	add	r15, r15
 6d6:	ff 0c       	add	r15, r15
 6d8:	f8 0e       	add	r15, r24
 6da:	f3 0e       	add	r15, r19
 6dc:	20 62       	ori	r18, 0x20	; 32
 6de:	0c c0       	rjmp	.+24     	; 0x6f8 <vfprintf+0xd8>
 6e0:	8e 32       	cpi	r24, 0x2E	; 46
 6e2:	21 f4       	brne	.+8      	; 0x6ec <vfprintf+0xcc>
 6e4:	26 fd       	sbrc	r18, 6
 6e6:	78 c1       	rjmp	.+752    	; 0x9d8 <__stack+0x179>
 6e8:	20 64       	ori	r18, 0x40	; 64
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <vfprintf+0xd8>
 6ec:	8c 36       	cpi	r24, 0x6C	; 108
 6ee:	11 f4       	brne	.+4      	; 0x6f4 <vfprintf+0xd4>
 6f0:	20 68       	ori	r18, 0x80	; 128
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <vfprintf+0xd8>
 6f4:	88 36       	cpi	r24, 0x68	; 104
 6f6:	49 f4       	brne	.+18     	; 0x70a <vfprintf+0xea>
 6f8:	f1 01       	movw	r30, r2
 6fa:	93 fd       	sbrc	r25, 3
 6fc:	85 91       	lpm	r24, Z+
 6fe:	93 ff       	sbrs	r25, 3
 700:	81 91       	ld	r24, Z+
 702:	1f 01       	movw	r2, r30
 704:	88 23       	and	r24, r24
 706:	09 f0       	breq	.+2      	; 0x70a <vfprintf+0xea>
 708:	ba cf       	rjmp	.-140    	; 0x67e <vfprintf+0x5e>
 70a:	98 2f       	mov	r25, r24
 70c:	95 54       	subi	r25, 0x45	; 69
 70e:	93 30       	cpi	r25, 0x03	; 3
 710:	18 f0       	brcs	.+6      	; 0x718 <vfprintf+0xf8>
 712:	90 52       	subi	r25, 0x20	; 32
 714:	93 30       	cpi	r25, 0x03	; 3
 716:	28 f4       	brcc	.+10     	; 0x722 <vfprintf+0x102>
 718:	0c 5f       	subi	r16, 0xFC	; 252
 71a:	1f 4f       	sbci	r17, 0xFF	; 255
 71c:	ff e3       	ldi	r31, 0x3F	; 63
 71e:	f9 83       	std	Y+1, r31	; 0x01
 720:	0d c0       	rjmp	.+26     	; 0x73c <vfprintf+0x11c>
 722:	83 36       	cpi	r24, 0x63	; 99
 724:	31 f0       	breq	.+12     	; 0x732 <vfprintf+0x112>
 726:	83 37       	cpi	r24, 0x73	; 115
 728:	71 f0       	breq	.+28     	; 0x746 <vfprintf+0x126>
 72a:	83 35       	cpi	r24, 0x53	; 83
 72c:	09 f0       	breq	.+2      	; 0x730 <vfprintf+0x110>
 72e:	60 c0       	rjmp	.+192    	; 0x7f0 <vfprintf+0x1d0>
 730:	22 c0       	rjmp	.+68     	; 0x776 <vfprintf+0x156>
 732:	f8 01       	movw	r30, r16
 734:	80 81       	ld	r24, Z
 736:	89 83       	std	Y+1, r24	; 0x01
 738:	0e 5f       	subi	r16, 0xFE	; 254
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	42 01       	movw	r8, r4
 73e:	71 e0       	ldi	r23, 0x01	; 1
 740:	a7 2e       	mov	r10, r23
 742:	b1 2c       	mov	r11, r1
 744:	16 c0       	rjmp	.+44     	; 0x772 <vfprintf+0x152>
 746:	62 e0       	ldi	r22, 0x02	; 2
 748:	66 2e       	mov	r6, r22
 74a:	71 2c       	mov	r7, r1
 74c:	60 0e       	add	r6, r16
 74e:	71 1e       	adc	r7, r17
 750:	f8 01       	movw	r30, r16
 752:	80 80       	ld	r8, Z
 754:	91 80       	ldd	r9, Z+1	; 0x01
 756:	26 ff       	sbrs	r18, 6
 758:	03 c0       	rjmp	.+6      	; 0x760 <vfprintf+0x140>
 75a:	6e 2d       	mov	r22, r14
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	02 c0       	rjmp	.+4      	; 0x764 <vfprintf+0x144>
 760:	6f ef       	ldi	r22, 0xFF	; 255
 762:	7f ef       	ldi	r23, 0xFF	; 255
 764:	c4 01       	movw	r24, r8
 766:	2c 87       	std	Y+12, r18	; 0x0c
 768:	0e 94 02 05 	call	0xa04	; 0xa04 <strnlen>
 76c:	5c 01       	movw	r10, r24
 76e:	83 01       	movw	r16, r6
 770:	2c 85       	ldd	r18, Y+12	; 0x0c
 772:	2f 77       	andi	r18, 0x7F	; 127
 774:	17 c0       	rjmp	.+46     	; 0x7a4 <vfprintf+0x184>
 776:	52 e0       	ldi	r21, 0x02	; 2
 778:	65 2e       	mov	r6, r21
 77a:	71 2c       	mov	r7, r1
 77c:	60 0e       	add	r6, r16
 77e:	71 1e       	adc	r7, r17
 780:	f8 01       	movw	r30, r16
 782:	80 80       	ld	r8, Z
 784:	91 80       	ldd	r9, Z+1	; 0x01
 786:	26 ff       	sbrs	r18, 6
 788:	03 c0       	rjmp	.+6      	; 0x790 <vfprintf+0x170>
 78a:	6e 2d       	mov	r22, r14
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <vfprintf+0x174>
 790:	6f ef       	ldi	r22, 0xFF	; 255
 792:	7f ef       	ldi	r23, 0xFF	; 255
 794:	c4 01       	movw	r24, r8
 796:	2c 87       	std	Y+12, r18	; 0x0c
 798:	0e 94 f7 04 	call	0x9ee	; 0x9ee <strnlen_P>
 79c:	5c 01       	movw	r10, r24
 79e:	2c 85       	ldd	r18, Y+12	; 0x0c
 7a0:	20 68       	ori	r18, 0x80	; 128
 7a2:	83 01       	movw	r16, r6
 7a4:	23 fd       	sbrc	r18, 3
 7a6:	20 c0       	rjmp	.+64     	; 0x7e8 <vfprintf+0x1c8>
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <vfprintf+0x19a>
 7aa:	80 e2       	ldi	r24, 0x20	; 32
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	b6 01       	movw	r22, r12
 7b0:	2c 87       	std	Y+12, r18	; 0x0c
 7b2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 7b6:	fa 94       	dec	r15
 7b8:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ba:	8f 2d       	mov	r24, r15
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	a8 16       	cp	r10, r24
 7c0:	b9 06       	cpc	r11, r25
 7c2:	98 f3       	brcs	.-26     	; 0x7aa <vfprintf+0x18a>
 7c4:	11 c0       	rjmp	.+34     	; 0x7e8 <vfprintf+0x1c8>
 7c6:	f4 01       	movw	r30, r8
 7c8:	27 fd       	sbrc	r18, 7
 7ca:	85 91       	lpm	r24, Z+
 7cc:	27 ff       	sbrs	r18, 7
 7ce:	81 91       	ld	r24, Z+
 7d0:	4f 01       	movw	r8, r30
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	b6 01       	movw	r22, r12
 7d6:	2c 87       	std	Y+12, r18	; 0x0c
 7d8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 7dc:	2c 85       	ldd	r18, Y+12	; 0x0c
 7de:	f1 10       	cpse	r15, r1
 7e0:	fa 94       	dec	r15
 7e2:	08 94       	sec
 7e4:	a1 08       	sbc	r10, r1
 7e6:	b1 08       	sbc	r11, r1
 7e8:	a1 14       	cp	r10, r1
 7ea:	b1 04       	cpc	r11, r1
 7ec:	61 f7       	brne	.-40     	; 0x7c6 <vfprintf+0x1a6>
 7ee:	f1 c0       	rjmp	.+482    	; 0x9d2 <__stack+0x173>
 7f0:	84 36       	cpi	r24, 0x64	; 100
 7f2:	11 f0       	breq	.+4      	; 0x7f8 <vfprintf+0x1d8>
 7f4:	89 36       	cpi	r24, 0x69	; 105
 7f6:	49 f5       	brne	.+82     	; 0x84a <vfprintf+0x22a>
 7f8:	27 ff       	sbrs	r18, 7
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <vfprintf+0x1ec>
 7fc:	f8 01       	movw	r30, r16
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	82 81       	ldd	r24, Z+2	; 0x02
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	0c 5f       	subi	r16, 0xFC	; 252
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	09 c0       	rjmp	.+18     	; 0x81e <vfprintf+0x1fe>
 80c:	f8 01       	movw	r30, r16
 80e:	60 81       	ld	r22, Z
 810:	71 81       	ldd	r23, Z+1	; 0x01
 812:	88 27       	eor	r24, r24
 814:	77 fd       	sbrc	r23, 7
 816:	80 95       	com	r24
 818:	98 2f       	mov	r25, r24
 81a:	0e 5f       	subi	r16, 0xFE	; 254
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
 81e:	4f e6       	ldi	r20, 0x6F	; 111
 820:	b4 2e       	mov	r11, r20
 822:	b2 22       	and	r11, r18
 824:	97 ff       	sbrs	r25, 7
 826:	09 c0       	rjmp	.+18     	; 0x83a <vfprintf+0x21a>
 828:	90 95       	com	r25
 82a:	80 95       	com	r24
 82c:	70 95       	com	r23
 82e:	61 95       	neg	r22
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	f0 e8       	ldi	r31, 0x80	; 128
 838:	bf 2a       	or	r11, r31
 83a:	a2 01       	movw	r20, r4
 83c:	2a e0       	ldi	r18, 0x0A	; 10
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	0e 94 39 05 	call	0xa72	; 0xa72 <__ultoa_invert>
 844:	78 2e       	mov	r7, r24
 846:	74 18       	sub	r7, r4
 848:	45 c0       	rjmp	.+138    	; 0x8d4 <__stack+0x75>
 84a:	85 37       	cpi	r24, 0x75	; 117
 84c:	31 f4       	brne	.+12     	; 0x85a <vfprintf+0x23a>
 84e:	3f ee       	ldi	r19, 0xEF	; 239
 850:	b3 2e       	mov	r11, r19
 852:	b2 22       	and	r11, r18
 854:	2a e0       	ldi	r18, 0x0A	; 10
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	25 c0       	rjmp	.+74     	; 0x8a4 <__stack+0x45>
 85a:	99 ef       	ldi	r25, 0xF9	; 249
 85c:	b9 2e       	mov	r11, r25
 85e:	b2 22       	and	r11, r18
 860:	8f 36       	cpi	r24, 0x6F	; 111
 862:	c1 f0       	breq	.+48     	; 0x894 <__stack+0x35>
 864:	80 37       	cpi	r24, 0x70	; 112
 866:	20 f4       	brcc	.+8      	; 0x870 <__stack+0x11>
 868:	88 35       	cpi	r24, 0x58	; 88
 86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
 86c:	b5 c0       	rjmp	.+362    	; 0x9d8 <__stack+0x179>
 86e:	0d c0       	rjmp	.+26     	; 0x88a <__stack+0x2b>
 870:	80 37       	cpi	r24, 0x70	; 112
 872:	21 f0       	breq	.+8      	; 0x87c <__stack+0x1d>
 874:	88 37       	cpi	r24, 0x78	; 120
 876:	09 f0       	breq	.+2      	; 0x87a <__stack+0x1b>
 878:	af c0       	rjmp	.+350    	; 0x9d8 <__stack+0x179>
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	20 e1       	ldi	r18, 0x10	; 16
 87e:	b2 2a       	or	r11, r18
 880:	b4 fe       	sbrs	r11, 4
 882:	0b c0       	rjmp	.+22     	; 0x89a <__stack+0x3b>
 884:	84 e0       	ldi	r24, 0x04	; 4
 886:	b8 2a       	or	r11, r24
 888:	08 c0       	rjmp	.+16     	; 0x89a <__stack+0x3b>
 88a:	b4 fe       	sbrs	r11, 4
 88c:	09 c0       	rjmp	.+18     	; 0x8a0 <__stack+0x41>
 88e:	e6 e0       	ldi	r30, 0x06	; 6
 890:	be 2a       	or	r11, r30
 892:	06 c0       	rjmp	.+12     	; 0x8a0 <__stack+0x41>
 894:	28 e0       	ldi	r18, 0x08	; 8
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	05 c0       	rjmp	.+10     	; 0x8a4 <__stack+0x45>
 89a:	20 e1       	ldi	r18, 0x10	; 16
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	20 e1       	ldi	r18, 0x10	; 16
 8a2:	32 e0       	ldi	r19, 0x02	; 2
 8a4:	b7 fe       	sbrs	r11, 7
 8a6:	08 c0       	rjmp	.+16     	; 0x8b8 <__stack+0x59>
 8a8:	f8 01       	movw	r30, r16
 8aa:	60 81       	ld	r22, Z
 8ac:	71 81       	ldd	r23, Z+1	; 0x01
 8ae:	82 81       	ldd	r24, Z+2	; 0x02
 8b0:	93 81       	ldd	r25, Z+3	; 0x03
 8b2:	0c 5f       	subi	r16, 0xFC	; 252
 8b4:	1f 4f       	sbci	r17, 0xFF	; 255
 8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <__stack+0x67>
 8b8:	f8 01       	movw	r30, r16
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 5f       	subi	r16, 0xFE	; 254
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	a2 01       	movw	r20, r4
 8c8:	0e 94 39 05 	call	0xa72	; 0xa72 <__ultoa_invert>
 8cc:	78 2e       	mov	r7, r24
 8ce:	74 18       	sub	r7, r4
 8d0:	ff e7       	ldi	r31, 0x7F	; 127
 8d2:	bf 22       	and	r11, r31
 8d4:	b6 fe       	sbrs	r11, 6
 8d6:	0b c0       	rjmp	.+22     	; 0x8ee <__stack+0x8f>
 8d8:	2e ef       	ldi	r18, 0xFE	; 254
 8da:	b2 22       	and	r11, r18
 8dc:	7e 14       	cp	r7, r14
 8de:	38 f4       	brcc	.+14     	; 0x8ee <__stack+0x8f>
 8e0:	b4 fe       	sbrs	r11, 4
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__stack+0x93>
 8e4:	b2 fc       	sbrc	r11, 2
 8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__stack+0x93>
 8e8:	8f ee       	ldi	r24, 0xEF	; 239
 8ea:	b8 22       	and	r11, r24
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	a7 2c       	mov	r10, r7
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <__stack+0x95>
 8f2:	ae 2c       	mov	r10, r14
 8f4:	8b 2d       	mov	r24, r11
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	b4 fe       	sbrs	r11, 4
 8fa:	0d c0       	rjmp	.+26     	; 0x916 <__stack+0xb7>
 8fc:	fe 01       	movw	r30, r28
 8fe:	e7 0d       	add	r30, r7
 900:	f1 1d       	adc	r31, r1
 902:	20 81       	ld	r18, Z
 904:	20 33       	cpi	r18, 0x30	; 48
 906:	19 f4       	brne	.+6      	; 0x90e <__stack+0xaf>
 908:	e9 ee       	ldi	r30, 0xE9	; 233
 90a:	be 22       	and	r11, r30
 90c:	09 c0       	rjmp	.+18     	; 0x920 <__stack+0xc1>
 90e:	a3 94       	inc	r10
 910:	b2 fe       	sbrs	r11, 2
 912:	06 c0       	rjmp	.+12     	; 0x920 <__stack+0xc1>
 914:	04 c0       	rjmp	.+8      	; 0x91e <__stack+0xbf>
 916:	86 78       	andi	r24, 0x86	; 134
 918:	90 70       	andi	r25, 0x00	; 0
 91a:	00 97       	sbiw	r24, 0x00	; 0
 91c:	09 f0       	breq	.+2      	; 0x920 <__stack+0xc1>
 91e:	a3 94       	inc	r10
 920:	8b 2c       	mov	r8, r11
 922:	99 24       	eor	r9, r9
 924:	b3 fc       	sbrc	r11, 3
 926:	14 c0       	rjmp	.+40     	; 0x950 <__stack+0xf1>
 928:	b0 fe       	sbrs	r11, 0
 92a:	0f c0       	rjmp	.+30     	; 0x94a <__stack+0xeb>
 92c:	af 14       	cp	r10, r15
 92e:	28 f4       	brcc	.+10     	; 0x93a <__stack+0xdb>
 930:	e7 2c       	mov	r14, r7
 932:	ef 0c       	add	r14, r15
 934:	ea 18       	sub	r14, r10
 936:	af 2c       	mov	r10, r15
 938:	08 c0       	rjmp	.+16     	; 0x94a <__stack+0xeb>
 93a:	e7 2c       	mov	r14, r7
 93c:	06 c0       	rjmp	.+12     	; 0x94a <__stack+0xeb>
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	b6 01       	movw	r22, r12
 944:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 948:	a3 94       	inc	r10
 94a:	af 14       	cp	r10, r15
 94c:	c0 f3       	brcs	.-16     	; 0x93e <__stack+0xdf>
 94e:	04 c0       	rjmp	.+8      	; 0x958 <__stack+0xf9>
 950:	af 14       	cp	r10, r15
 952:	10 f4       	brcc	.+4      	; 0x958 <__stack+0xf9>
 954:	fa 18       	sub	r15, r10
 956:	01 c0       	rjmp	.+2      	; 0x95a <__stack+0xfb>
 958:	ff 24       	eor	r15, r15
 95a:	84 fe       	sbrs	r8, 4
 95c:	0f c0       	rjmp	.+30     	; 0x97c <__stack+0x11d>
 95e:	80 e3       	ldi	r24, 0x30	; 48
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	b6 01       	movw	r22, r12
 964:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 968:	82 fe       	sbrs	r8, 2
 96a:	1f c0       	rjmp	.+62     	; 0x9aa <__stack+0x14b>
 96c:	81 fe       	sbrs	r8, 1
 96e:	03 c0       	rjmp	.+6      	; 0x976 <__stack+0x117>
 970:	88 e5       	ldi	r24, 0x58	; 88
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	10 c0       	rjmp	.+32     	; 0x996 <__stack+0x137>
 976:	88 e7       	ldi	r24, 0x78	; 120
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0d c0       	rjmp	.+26     	; 0x996 <__stack+0x137>
 97c:	c4 01       	movw	r24, r8
 97e:	86 78       	andi	r24, 0x86	; 134
 980:	90 70       	andi	r25, 0x00	; 0
 982:	00 97       	sbiw	r24, 0x00	; 0
 984:	91 f0       	breq	.+36     	; 0x9aa <__stack+0x14b>
 986:	81 fc       	sbrc	r8, 1
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x12f>
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	01 c0       	rjmp	.+2      	; 0x990 <__stack+0x131>
 98e:	8b e2       	ldi	r24, 0x2B	; 43
 990:	b7 fc       	sbrc	r11, 7
 992:	8d e2       	ldi	r24, 0x2D	; 45
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	b6 01       	movw	r22, r12
 998:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 99c:	06 c0       	rjmp	.+12     	; 0x9aa <__stack+0x14b>
 99e:	80 e3       	ldi	r24, 0x30	; 48
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	b6 01       	movw	r22, r12
 9a4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 9a8:	ea 94       	dec	r14
 9aa:	7e 14       	cp	r7, r14
 9ac:	c0 f3       	brcs	.-16     	; 0x99e <__stack+0x13f>
 9ae:	7a 94       	dec	r7
 9b0:	f2 01       	movw	r30, r4
 9b2:	e7 0d       	add	r30, r7
 9b4:	f1 1d       	adc	r31, r1
 9b6:	80 81       	ld	r24, Z
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	b6 01       	movw	r22, r12
 9bc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 9c0:	77 20       	and	r7, r7
 9c2:	a9 f7       	brne	.-22     	; 0x9ae <__stack+0x14f>
 9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <__stack+0x173>
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	b6 01       	movw	r22, r12
 9cc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 9d0:	fa 94       	dec	r15
 9d2:	ff 20       	and	r15, r15
 9d4:	c1 f7       	brne	.-16     	; 0x9c6 <__stack+0x167>
 9d6:	37 ce       	rjmp	.-914    	; 0x646 <vfprintf+0x26>
 9d8:	f6 01       	movw	r30, r12
 9da:	26 81       	ldd	r18, Z+6	; 0x06
 9dc:	37 81       	ldd	r19, Z+7	; 0x07
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__stack+0x185>
 9e0:	2f ef       	ldi	r18, 0xFF	; 255
 9e2:	3f ef       	ldi	r19, 0xFF	; 255
 9e4:	c9 01       	movw	r24, r18
 9e6:	2c 96       	adiw	r28, 0x0c	; 12
 9e8:	e2 e1       	ldi	r30, 0x12	; 18
 9ea:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__epilogue_restores__>

000009ee <strnlen_P>:
 9ee:	fc 01       	movw	r30, r24
 9f0:	05 90       	lpm	r0, Z+
 9f2:	61 50       	subi	r22, 0x01	; 1
 9f4:	70 40       	sbci	r23, 0x00	; 0
 9f6:	01 10       	cpse	r0, r1
 9f8:	d8 f7       	brcc	.-10     	; 0x9f0 <strnlen_P+0x2>
 9fa:	80 95       	com	r24
 9fc:	90 95       	com	r25
 9fe:	8e 0f       	add	r24, r30
 a00:	9f 1f       	adc	r25, r31
 a02:	08 95       	ret

00000a04 <strnlen>:
 a04:	fc 01       	movw	r30, r24
 a06:	61 50       	subi	r22, 0x01	; 1
 a08:	70 40       	sbci	r23, 0x00	; 0
 a0a:	01 90       	ld	r0, Z+
 a0c:	01 10       	cpse	r0, r1
 a0e:	d8 f7       	brcc	.-10     	; 0xa06 <strnlen+0x2>
 a10:	80 95       	com	r24
 a12:	90 95       	com	r25
 a14:	8e 0f       	add	r24, r30
 a16:	9f 1f       	adc	r25, r31
 a18:	08 95       	ret

00000a1a <fputc>:
 a1a:	0f 93       	push	r16
 a1c:	1f 93       	push	r17
 a1e:	cf 93       	push	r28
 a20:	df 93       	push	r29
 a22:	8c 01       	movw	r16, r24
 a24:	eb 01       	movw	r28, r22
 a26:	8b 81       	ldd	r24, Y+3	; 0x03
 a28:	81 ff       	sbrs	r24, 1
 a2a:	1b c0       	rjmp	.+54     	; 0xa62 <fputc+0x48>
 a2c:	82 ff       	sbrs	r24, 2
 a2e:	0d c0       	rjmp	.+26     	; 0xa4a <fputc+0x30>
 a30:	2e 81       	ldd	r18, Y+6	; 0x06
 a32:	3f 81       	ldd	r19, Y+7	; 0x07
 a34:	8c 81       	ldd	r24, Y+4	; 0x04
 a36:	9d 81       	ldd	r25, Y+5	; 0x05
 a38:	28 17       	cp	r18, r24
 a3a:	39 07       	cpc	r19, r25
 a3c:	64 f4       	brge	.+24     	; 0xa56 <fputc+0x3c>
 a3e:	e8 81       	ld	r30, Y
 a40:	f9 81       	ldd	r31, Y+1	; 0x01
 a42:	01 93       	st	Z+, r16
 a44:	f9 83       	std	Y+1, r31	; 0x01
 a46:	e8 83       	st	Y, r30
 a48:	06 c0       	rjmp	.+12     	; 0xa56 <fputc+0x3c>
 a4a:	e8 85       	ldd	r30, Y+8	; 0x08
 a4c:	f9 85       	ldd	r31, Y+9	; 0x09
 a4e:	80 2f       	mov	r24, r16
 a50:	09 95       	icall
 a52:	00 97       	sbiw	r24, 0x00	; 0
 a54:	31 f4       	brne	.+12     	; 0xa62 <fputc+0x48>
 a56:	8e 81       	ldd	r24, Y+6	; 0x06
 a58:	9f 81       	ldd	r25, Y+7	; 0x07
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	9f 83       	std	Y+7, r25	; 0x07
 a5e:	8e 83       	std	Y+6, r24	; 0x06
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <fputc+0x4c>
 a62:	0f ef       	ldi	r16, 0xFF	; 255
 a64:	1f ef       	ldi	r17, 0xFF	; 255
 a66:	c8 01       	movw	r24, r16
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	1f 91       	pop	r17
 a6e:	0f 91       	pop	r16
 a70:	08 95       	ret

00000a72 <__ultoa_invert>:
 a72:	fa 01       	movw	r30, r20
 a74:	aa 27       	eor	r26, r26
 a76:	28 30       	cpi	r18, 0x08	; 8
 a78:	51 f1       	breq	.+84     	; 0xace <__ultoa_invert+0x5c>
 a7a:	20 31       	cpi	r18, 0x10	; 16
 a7c:	81 f1       	breq	.+96     	; 0xade <__ultoa_invert+0x6c>
 a7e:	e8 94       	clt
 a80:	6f 93       	push	r22
 a82:	6e 7f       	andi	r22, 0xFE	; 254
 a84:	6e 5f       	subi	r22, 0xFE	; 254
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	af 4f       	sbci	r26, 0xFF	; 255
 a8e:	b1 e0       	ldi	r27, 0x01	; 1
 a90:	3e d0       	rcall	.+124    	; 0xb0e <__ultoa_invert+0x9c>
 a92:	b4 e0       	ldi	r27, 0x04	; 4
 a94:	3c d0       	rcall	.+120    	; 0xb0e <__ultoa_invert+0x9c>
 a96:	67 0f       	add	r22, r23
 a98:	78 1f       	adc	r23, r24
 a9a:	89 1f       	adc	r24, r25
 a9c:	9a 1f       	adc	r25, r26
 a9e:	a1 1d       	adc	r26, r1
 aa0:	68 0f       	add	r22, r24
 aa2:	79 1f       	adc	r23, r25
 aa4:	8a 1f       	adc	r24, r26
 aa6:	91 1d       	adc	r25, r1
 aa8:	a1 1d       	adc	r26, r1
 aaa:	6a 0f       	add	r22, r26
 aac:	71 1d       	adc	r23, r1
 aae:	81 1d       	adc	r24, r1
 ab0:	91 1d       	adc	r25, r1
 ab2:	a1 1d       	adc	r26, r1
 ab4:	20 d0       	rcall	.+64     	; 0xaf6 <__ultoa_invert+0x84>
 ab6:	09 f4       	brne	.+2      	; 0xaba <__ultoa_invert+0x48>
 ab8:	68 94       	set
 aba:	3f 91       	pop	r19
 abc:	2a e0       	ldi	r18, 0x0A	; 10
 abe:	26 9f       	mul	r18, r22
 ac0:	11 24       	eor	r1, r1
 ac2:	30 19       	sub	r19, r0
 ac4:	30 5d       	subi	r19, 0xD0	; 208
 ac6:	31 93       	st	Z+, r19
 ac8:	de f6       	brtc	.-74     	; 0xa80 <__ultoa_invert+0xe>
 aca:	cf 01       	movw	r24, r30
 acc:	08 95       	ret
 ace:	46 2f       	mov	r20, r22
 ad0:	47 70       	andi	r20, 0x07	; 7
 ad2:	40 5d       	subi	r20, 0xD0	; 208
 ad4:	41 93       	st	Z+, r20
 ad6:	b3 e0       	ldi	r27, 0x03	; 3
 ad8:	0f d0       	rcall	.+30     	; 0xaf8 <__ultoa_invert+0x86>
 ada:	c9 f7       	brne	.-14     	; 0xace <__ultoa_invert+0x5c>
 adc:	f6 cf       	rjmp	.-20     	; 0xaca <__ultoa_invert+0x58>
 ade:	46 2f       	mov	r20, r22
 ae0:	4f 70       	andi	r20, 0x0F	; 15
 ae2:	40 5d       	subi	r20, 0xD0	; 208
 ae4:	4a 33       	cpi	r20, 0x3A	; 58
 ae6:	18 f0       	brcs	.+6      	; 0xaee <__ultoa_invert+0x7c>
 ae8:	49 5d       	subi	r20, 0xD9	; 217
 aea:	31 fd       	sbrc	r19, 1
 aec:	40 52       	subi	r20, 0x20	; 32
 aee:	41 93       	st	Z+, r20
 af0:	02 d0       	rcall	.+4      	; 0xaf6 <__ultoa_invert+0x84>
 af2:	a9 f7       	brne	.-22     	; 0xade <__ultoa_invert+0x6c>
 af4:	ea cf       	rjmp	.-44     	; 0xaca <__ultoa_invert+0x58>
 af6:	b4 e0       	ldi	r27, 0x04	; 4
 af8:	a6 95       	lsr	r26
 afa:	97 95       	ror	r25
 afc:	87 95       	ror	r24
 afe:	77 95       	ror	r23
 b00:	67 95       	ror	r22
 b02:	ba 95       	dec	r27
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <__ultoa_invert+0x86>
 b06:	00 97       	sbiw	r24, 0x00	; 0
 b08:	61 05       	cpc	r22, r1
 b0a:	71 05       	cpc	r23, r1
 b0c:	08 95       	ret
 b0e:	9b 01       	movw	r18, r22
 b10:	ac 01       	movw	r20, r24
 b12:	0a 2e       	mov	r0, r26
 b14:	06 94       	lsr	r0
 b16:	57 95       	ror	r21
 b18:	47 95       	ror	r20
 b1a:	37 95       	ror	r19
 b1c:	27 95       	ror	r18
 b1e:	ba 95       	dec	r27
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__ultoa_invert+0xa2>
 b22:	62 0f       	add	r22, r18
 b24:	73 1f       	adc	r23, r19
 b26:	84 1f       	adc	r24, r20
 b28:	95 1f       	adc	r25, r21
 b2a:	a0 1d       	adc	r26, r0
 b2c:	08 95       	ret

00000b2e <__prologue_saves__>:
 b2e:	2f 92       	push	r2
 b30:	3f 92       	push	r3
 b32:	4f 92       	push	r4
 b34:	5f 92       	push	r5
 b36:	6f 92       	push	r6
 b38:	7f 92       	push	r7
 b3a:	8f 92       	push	r8
 b3c:	9f 92       	push	r9
 b3e:	af 92       	push	r10
 b40:	bf 92       	push	r11
 b42:	cf 92       	push	r12
 b44:	df 92       	push	r13
 b46:	ef 92       	push	r14
 b48:	ff 92       	push	r15
 b4a:	0f 93       	push	r16
 b4c:	1f 93       	push	r17
 b4e:	cf 93       	push	r28
 b50:	df 93       	push	r29
 b52:	cd b7       	in	r28, 0x3d	; 61
 b54:	de b7       	in	r29, 0x3e	; 62
 b56:	ca 1b       	sub	r28, r26
 b58:	db 0b       	sbc	r29, r27
 b5a:	0f b6       	in	r0, 0x3f	; 63
 b5c:	f8 94       	cli
 b5e:	de bf       	out	0x3e, r29	; 62
 b60:	0f be       	out	0x3f, r0	; 63
 b62:	cd bf       	out	0x3d, r28	; 61
 b64:	09 94       	ijmp

00000b66 <__epilogue_restores__>:
 b66:	2a 88       	ldd	r2, Y+18	; 0x12
 b68:	39 88       	ldd	r3, Y+17	; 0x11
 b6a:	48 88       	ldd	r4, Y+16	; 0x10
 b6c:	5f 84       	ldd	r5, Y+15	; 0x0f
 b6e:	6e 84       	ldd	r6, Y+14	; 0x0e
 b70:	7d 84       	ldd	r7, Y+13	; 0x0d
 b72:	8c 84       	ldd	r8, Y+12	; 0x0c
 b74:	9b 84       	ldd	r9, Y+11	; 0x0b
 b76:	aa 84       	ldd	r10, Y+10	; 0x0a
 b78:	b9 84       	ldd	r11, Y+9	; 0x09
 b7a:	c8 84       	ldd	r12, Y+8	; 0x08
 b7c:	df 80       	ldd	r13, Y+7	; 0x07
 b7e:	ee 80       	ldd	r14, Y+6	; 0x06
 b80:	fd 80       	ldd	r15, Y+5	; 0x05
 b82:	0c 81       	ldd	r16, Y+4	; 0x04
 b84:	1b 81       	ldd	r17, Y+3	; 0x03
 b86:	aa 81       	ldd	r26, Y+2	; 0x02
 b88:	b9 81       	ldd	r27, Y+1	; 0x01
 b8a:	ce 0f       	add	r28, r30
 b8c:	d1 1d       	adc	r29, r1
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	f8 94       	cli
 b92:	de bf       	out	0x3e, r29	; 62
 b94:	0f be       	out	0x3f, r0	; 63
 b96:	cd bf       	out	0x3d, r28	; 61
 b98:	ed 01       	movw	r28, r26
 b9a:	08 95       	ret

00000b9c <_exit>:
 b9c:	f8 94       	cli

00000b9e <__stop_program>:
 b9e:	ff cf       	rjmp	.-2      	; 0xb9e <__stop_program>
