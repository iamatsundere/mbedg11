
TWO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000c10  00000ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  00800076  00800076  00000cba  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001e2  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001c1  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c2f  00000000  00000000  00001d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000519  00000000  00000000  00002992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011fd  00000000  00000000  00002eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  000040a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003d1  00000000  00000000  00004218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a9e  00000000  00000000  000045e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000fc  00000000  00000000  00005087  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  00005183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 34       	cpi	r26, 0x42	; 66
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 02 	call	0x490	; 0x490 <main>
  8a:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Read2Nib>:
#define DDR_DATA	DDRD
*/

char Read2Nib(void){
	char HNib, LNib;
	DATA_O |=0xF0;
  92:	88 b3       	in	r24, 0x18	; 24
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	88 bb       	out	0x18, r24	; 24
	
	sbi(CTRL,EN); //enable	
  98:	c2 9a       	sbi	0x18, 2	; 24
	DDR_DATA &=0x0F;	
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	8f 70       	andi	r24, 0x0F	; 15
  9e:	87 bb       	out	0x17, r24	; 23
	HNib=DATA_I & 0xF0;
  a0:	86 b3       	in	r24, 0x16	; 22
	cbi(CTRL,EN); //disable
  a2:	c2 98       	cbi	0x18, 2	; 24
	
	sbi(CTRL,EN); //enable
  a4:	c2 9a       	sbi	0x18, 2	; 24
	LNib = DATA_I & 0xF0;
  a6:	96 b3       	in	r25, 0x16	; 22
	cbi(CTRL,EN); //disable
  a8:	c2 98       	cbi	0x18, 2	; 24
	LNib>>=4;
  aa:	92 95       	swap	r25
  ac:	9f 70       	andi	r25, 0x0F	; 15
	char HNib, LNib;
	DATA_O |=0xF0;
	
	sbi(CTRL,EN); //enable	
	DDR_DATA &=0x0F;	
	HNib=DATA_I & 0xF0;
  ae:	80 7f       	andi	r24, 0xF0	; 240
	sbi(CTRL,EN); //enable
	LNib = DATA_I & 0xF0;
	cbi(CTRL,EN); //disable
	LNib>>=4;
	return (HNib|LNib);
}
  b0:	89 2b       	or	r24, r25
  b2:	08 95       	ret

000000b4 <Write2Nib>:

void Write2Nib(uint8_t chr){

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;
  b4:	98 b3       	in	r25, 0x18	; 24
  b6:	9f 70       	andi	r25, 0x0F	; 15

	HNib=chr & 0xF0;
  b8:	28 2f       	mov	r18, r24
  ba:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;		
		
	DATA_O =(HNib |temp_data);	
  bc:	29 2b       	or	r18, r25
  be:	28 bb       	out	0x18, r18	; 24
	sbi(CTRL,EN); //enable
  c0:	c2 9a       	sbi	0x18, 2	; 24
	cbi(CTRL,EN); //disable	
  c2:	c2 98       	cbi	0x18, 2	; 24

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;		
  c4:	82 95       	swap	r24
  c6:	80 7f       	andi	r24, 0xF0	; 240
		
	DATA_O =(HNib |temp_data);	
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable	
	
	DATA_O =(LNib|temp_data);		
  c8:	98 2b       	or	r25, r24
  ca:	98 bb       	out	0x18, r25	; 24
	sbi(CTRL,EN); //enable
  cc:	c2 9a       	sbi	0x18, 2	; 24
	cbi(CTRL,EN); //disable
  ce:	c2 98       	cbi	0x18, 2	; 24
}
  d0:	08 95       	ret

000000d2 <Write8Bit>:

void Write8Bit(uint8_t chr){
	DATA_O=chr;   //out 8 bits to DATA Line
  d2:	88 bb       	out	0x18, r24	; 24
	sbi(CTRL,EN); //enable
  d4:	c2 9a       	sbi	0x18, 2	; 24
	cbi(CTRL,EN); //disable
  d6:	c2 98       	cbi	0x18, 2	; 24
}
  d8:	08 95       	ret

000000da <wait_LCD>:

void wait_LCD(void){	
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
			temp_val=Read2Nib();
			if (bit_is_clear(temp_val,7)) break;
  e8:	8e 01       	movw	r16, r28
  ea:	0f 5f       	subi	r16, 0xFF	; 255
  ec:	1f 4f       	sbci	r17, 0xFF	; 255
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
  ee:	c0 98       	cbi	0x18, 0	; 24
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
  f0:	c1 9a       	sbi	0x18, 1	; 24
			temp_val=Read2Nib();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <Read2Nib>
  f6:	89 83       	std	Y+1, r24	; 0x01
			if (bit_is_clear(temp_val,7)) break;
  f8:	f8 01       	movw	r30, r16
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	bc f3       	brlt	.-18     	; 0xee <wait_LCD+0x14>
		}
		cbi(CTRL,RW); //ready for next step	
 100:	c1 98       	cbi	0x18, 1	; 24
		DDR_DATA=0xFF;//Ready to Out		
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	87 bb       	out	0x17, r24	; 23
	#endif
	
	//_delay_ms(1);
	
}
 106:	0f 90       	pop	r0
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	08 95       	ret

00000112 <init_LCD>:


void init_LCD(void){
	DDR_CTRL=0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	87 bb       	out	0x17, r24	; 23
	DDR_DATA=0xFF;
 116:	87 bb       	out	0x17, r24	; 23
//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
 118:	c0 98       	cbi	0x18, 0	; 24
	cbi(CTRL, RW); // AVR->LCD
 11a:	c1 98       	cbi	0x18, 1	; 24
	cbi(CTRL, EN);
 11c:	c2 98       	cbi	0x18, 2	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x38);
		wait_LCD();
	#else
		sbi(CTRL,EN); //enable
 11e:	c2 9a       	sbi	0x18, 2	; 24
		sbi(DATA_O, 5); 
 120:	c5 9a       	sbi	0x18, 5	; 24
		cbi(CTRL,EN); //disable
 122:	c2 98       	cbi	0x18, 2	; 24
		wait_LCD();		
 124:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
		Write2Nib(0x28);//
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();	
 12e:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif
//Display control-------------------------------------------------------------------------	
	cbi(CTRL,RS); // the following data is COMMAND 
 132:	c0 98       	cbi	0x18, 0	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x0E);
		wait_LCD();
	#else
		Write2Nib(0x0C); //off cursor
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();			
 13a:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif
//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND 
 13e:	c0 98       	cbi	0x18, 0	; 24
	#ifdef LCD8BIT
		Write8Bit(0x06);
		wait_LCD();
	#else
		Write2Nib(0x06);
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();
 146:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif
}
 14a:	08 95       	ret

0000014c <home_LCD>:

void home_LCD(void){
	cbi(CTRL,RS); // the following data is COMMAND 
 14c:	c0 98       	cbi	0x18, 0	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x02);
		wait_LCD();	
	#else
		Write2Nib(0x02);
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();
 154:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif	
}
 158:	08 95       	ret

0000015a <move_LCD>:
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
	cbi(CTRL,RS); // the following data is COMMAND
 15a:	c0 98       	cbi	0x18, 0	; 24
		wait_LCD();
	#endif	
}
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
 15c:	82 95       	swap	r24
 15e:	88 0f       	add	r24, r24
 160:	88 0f       	add	r24, r24
 162:	80 7c       	andi	r24, 0xC0	; 192
 164:	86 0f       	add	r24, r22
	cbi(CTRL,RS); // the following data is COMMAND
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
 166:	81 5c       	subi	r24, 0xC1	; 193
 168:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();
 16c:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif	
}
 170:	08 95       	ret

00000172 <clr_LCD>:

void clr_LCD(void){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 172:	c0 98       	cbi	0x18, 0	; 24
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();	
 17a:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
		
	#endif	
}
 17e:	08 95       	ret

00000180 <putChar_LCD>:

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
 180:	c0 9a       	sbi	0x18, 0	; 24
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
 182:	0e 94 5a 00 	call	0xb4	; 0xb4 <Write2Nib>
		wait_LCD();	
 186:	0e 94 6d 00 	call	0xda	; 0xda <wait_LCD>
	#endif		
}
 18a:	08 95       	ret

0000018c <print_LCD>:

void print_LCD(char* str){
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
 194:	88 81       	ld	r24, Y
 196:	88 23       	and	r24, r24
 198:	51 f0       	breq	.+20     	; 0x1ae <print_LCD+0x22>
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	0e 94 c0 00 	call	0x180	; 0x180 <putChar_LCD>
 1a0:	1f 5f       	subi	r17, 0xFF	; 255
 1a2:	fe 01       	movw	r30, r28
 1a4:	e1 0f       	add	r30, r17
 1a6:	f1 1d       	adc	r31, r1
 1a8:	80 81       	ld	r24, Z
 1aa:	88 23       	and	r24, r24
 1ac:	b9 f7       	brne	.-18     	; 0x19c <print_LCD+0x10>
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	08 95       	ret

000001b6 <TWI_Init>:
//FOR MASTER USE********************************************


//Khoi dong TWI
void TWI_Init(void){
	TWSR=0x00; //Prescaler=1
 1b6:	11 b8       	out	0x01, r1	; 1
	TWBR=_100K;
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	80 b9       	out	0x00, r24	; 0
	TWAR=(Device_Addr<<1)+GENERAL_CALL;
 1bc:	80 91 75 00 	lds	r24, 0x0075
 1c0:	88 0f       	add	r24, r24
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	82 b9       	out	0x02, r24	; 2
	TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWIE); //ready for Slave mode: Ack is set, TWI is ENABLE and interrupt is ENABLE	
 1c6:	85 e4       	ldi	r24, 0x45	; 69
 1c8:	86 bf       	out	0x36, r24	; 54
}
 1ca:	08 95       	ret

000001cc <TWI_Master_Send_array>:


//---MASTER transmitter : array-------------------------------------------------------
uint8_t TWI_Master_Send_array(uint8_t Addr, uint8_t Data[], uint8_t len){
	cbi(TWCR, TWIE);
 1cc:	96 b7       	in	r25, 0x36	; 54
 1ce:	9e 7f       	andi	r25, 0xFE	; 254
 1d0:	96 bf       	out	0x36, r25	; 54
	//Send START Condition---------------------
	TWCR=TWI_START;
 1d2:	94 ea       	ldi	r25, 0xA4	; 164
 1d4:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 1d6:	06 b6       	in	r0, 0x36	; 54
 1d8:	07 fe       	sbrs	r0, 7
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <TWI_Master_Send_array+0xa>
	if((TWSR&0xF8) !=_START_Sent){TWI_Init(); return (TWSR&0xF8);}; //START send error, escape anyway
 1dc:	91 b1       	in	r25, 0x01	; 1
 1de:	98 7f       	andi	r25, 0xF8	; 248
 1e0:	98 30       	cpi	r25, 0x08	; 8
 1e2:	29 f0       	breq	.+10     	; 0x1ee <TWI_Master_Send_array+0x22>
 1e4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 1e8:	81 b1       	in	r24, 0x01	; 1
 1ea:	88 7f       	andi	r24, 0xF8	; 248
 1ec:	08 95       	ret
	
	//Send Device Address---------------------
	TWDR=(Addr<<1)+TWI_W; //repare address on TWDR,+W (send procedure)
 1ee:	88 0f       	add	r24, r24
 1f0:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 1f6:	06 b6       	in	r0, 0x36	; 54
 1f8:	07 fe       	sbrs	r0, 7
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <TWI_Master_Send_array+0x2a>
	if((TWSR&0xF8) !=_SLA_W_ACK){TWI_Init(); return (TWSR&0xF8);}; //addresssend error, escape anyway
 1fc:	81 b1       	in	r24, 0x01	; 1
 1fe:	88 7f       	andi	r24, 0xF8	; 248
 200:	88 31       	cpi	r24, 0x18	; 24
 202:	31 f4       	brne	.+12     	; 0x210 <TWI_Master_Send_array+0x44>
	
	//send DATA array---------------------
	for (int i=0; i<len; i++){ //repeat the sending proccess until reach the end of data
 204:	24 2f       	mov	r18, r20
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	12 16       	cp	r1, r18
 20a:	13 06       	cpc	r1, r19
 20c:	34 f0       	brlt	.+12     	; 0x21a <TWI_Master_Send_array+0x4e>
 20e:	1d c0       	rjmp	.+58     	; 0x24a <TWI_Master_Send_array+0x7e>
	
	//Send Device Address---------------------
	TWDR=(Addr<<1)+TWI_W; //repare address on TWDR,+W (send procedure)
	TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	if((TWSR&0xF8) !=_SLA_W_ACK){TWI_Init(); return (TWSR&0xF8);}; //addresssend error, escape anyway
 210:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 214:	81 b1       	in	r24, 0x01	; 1
 216:	88 7f       	andi	r24, 0xF8	; 248
 218:	08 95       	ret
 21a:	e6 2f       	mov	r30, r22
 21c:	f7 2f       	mov	r31, r23
	
	//send DATA array---------------------
	for (int i=0; i<len; i++){ //repeat the sending proccess until reach the end of data
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
		TWDR=Data[i]; //repare Data on TWDR
		TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
 222:	54 e8       	ldi	r21, 0x84	; 132
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	if((TWSR&0xF8) !=_SLA_W_ACK){TWI_Init(); return (TWSR&0xF8);}; //addresssend error, escape anyway
	
	//send DATA array---------------------
	for (int i=0; i<len; i++){ //repeat the sending proccess until reach the end of data
		TWDR=Data[i]; //repare Data on TWDR
 224:	41 91       	ld	r20, Z+
 226:	43 b9       	out	0x03, r20	; 3
		TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
 228:	56 bf       	out	0x36, r21	; 54
		while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 22a:	06 b6       	in	r0, 0x36	; 54
 22c:	07 fe       	sbrs	r0, 7
 22e:	fd cf       	rjmp	.-6      	; 0x22a <TWI_Master_Send_array+0x5e>
		if((TWSR&0xF8) !=_DATA_ACK) { TWI_Init(); return (TWSR&0xF8);}; //data send error, escape anyway	
 230:	41 b1       	in	r20, 0x01	; 1
 232:	48 7f       	andi	r20, 0xF8	; 248
 234:	48 32       	cpi	r20, 0x28	; 40
 236:	29 f0       	breq	.+10     	; 0x242 <TWI_Master_Send_array+0x76>
 238:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 23c:	81 b1       	in	r24, 0x01	; 1
 23e:	88 7f       	andi	r24, 0xF8	; 248
 240:	08 95       	ret
	TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	if((TWSR&0xF8) !=_SLA_W_ACK){TWI_Init(); return (TWSR&0xF8);}; //addresssend error, escape anyway
	
	//send DATA array---------------------
	for (int i=0; i<len; i++){ //repeat the sending proccess until reach the end of data
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	82 17       	cp	r24, r18
 246:	93 07       	cpc	r25, r19
 248:	6c f3       	brlt	.-38     	; 0x224 <TWI_Master_Send_array+0x58>
		TWCR=TWI_Clear_TWINT; //start send address by cleaning TWINT
		while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
		if((TWSR&0xF8) !=_DATA_ACK) { TWI_Init(); return (TWSR&0xF8);}; //data send error, escape anyway	
	}	
	//send the STOP condition
	TWCR=TWI_STOP;	
 24a:	84 e9       	ldi	r24, 0x94	; 148
 24c:	86 bf       	out	0x36, r24	; 54
	TWI_Init();
 24e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
	return 0;
 252:	80 e0       	ldi	r24, 0x00	; 0
}
 254:	08 95       	ret

00000256 <TWI_Master_Read_array>:

//---MASTER Receiver: array
uint8_t TWI_Master_Read_array(uint8_t Addr, uint8_t rData[], uint8_t len){	
 256:	1f 93       	push	r17
	uint8_t Status;
	cbi(TWCR, TWIE);
 258:	96 b7       	in	r25, 0x36	; 54
 25a:	9e 7f       	andi	r25, 0xFE	; 254
 25c:	96 bf       	out	0x36, r25	; 54
	//Send START Condition---------------------
	TWCR=TWI_START;
 25e:	94 ea       	ldi	r25, 0xA4	; 164
 260:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 262:	06 b6       	in	r0, 0x36	; 54
 264:	07 fe       	sbrs	r0, 7
 266:	fd cf       	rjmp	.-6      	; 0x262 <TWI_Master_Read_array+0xc>
	Status=TWSR&0xF8;
 268:	11 b1       	in	r17, 0x01	; 1
 26a:	18 7f       	andi	r17, 0xF8	; 248
	if(Status !=_START_Sent) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //START send error, escape anyway	
 26c:	18 30       	cpi	r17, 0x08	; 8
 26e:	29 f0       	breq	.+10     	; 0x27a <TWI_Master_Read_array+0x24>
 270:	84 e9       	ldi	r24, 0x94	; 148
 272:	86 bf       	out	0x36, r24	; 54
 274:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 278:	4f c0       	rjmp	.+158    	; 0x318 <TWI_Master_Read_array+0xc2>
	
	//Send Device Address---------------------
	TWDR=(Addr<<1)+TWI_R; //repare address on TWDR,+R (send procedure)
 27a:	88 0f       	add	r24, r24
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT;  //start send address by cleaning TWINT, not send ACK
 280:	84 e8       	ldi	r24, 0x84	; 132
 282:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 284:	06 b6       	in	r0, 0x36	; 54
 286:	07 fe       	sbrs	r0, 7
 288:	fd cf       	rjmp	.-6      	; 0x284 <TWI_Master_Read_array+0x2e>
	Status=TWSR&0xF8;
 28a:	11 b1       	in	r17, 0x01	; 1
 28c:	18 7f       	andi	r17, 0xF8	; 248
	if(Status !=_SLA_R_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //addresssend error, escape anyway
 28e:	10 34       	cpi	r17, 0x40	; 64
 290:	41 f4       	brne	.+16     	; 0x2a2 <TWI_Master_Read_array+0x4c>

	//Get DATA array---------------------
	for (int i=0; i<len-1; i++){
 292:	24 2f       	mov	r18, r20
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	21 50       	subi	r18, 0x01	; 1
 298:	30 40       	sbci	r19, 0x00	; 0
 29a:	12 16       	cp	r1, r18
 29c:	13 06       	cpc	r1, r19
 29e:	34 f0       	brlt	.+12     	; 0x2ac <TWI_Master_Read_array+0x56>
 2a0:	1f c0       	rjmp	.+62     	; 0x2e0 <TWI_Master_Read_array+0x8a>
	//Send Device Address---------------------
	TWDR=(Addr<<1)+TWI_R; //repare address on TWDR,+R (send procedure)
	TWCR=TWI_Clear_TWINT;  //start send address by cleaning TWINT, not send ACK
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	Status=TWSR&0xF8;
	if(Status !=_SLA_R_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //addresssend error, escape anyway
 2a2:	84 e9       	ldi	r24, 0x94	; 148
 2a4:	86 bf       	out	0x36, r24	; 54
 2a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 2aa:	36 c0       	rjmp	.+108    	; 0x318 <TWI_Master_Read_array+0xc2>
 2ac:	fb 01       	movw	r30, r22

	//Get DATA array---------------------
	for (int i=0; i<len-1; i++){
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
		TWCR=TWI_Read_ACK; //start read data by cleaning TWINT, set ACK after read each byte
 2b2:	a4 ec       	ldi	r26, 0xC4	; 196
 2b4:	a6 bf       	out	0x36, r26	; 54
		while ((TWCR & 0x80)==0x00)
 2b6:	06 b6       	in	r0, 0x36	; 54
 2b8:	07 fc       	sbrc	r0, 7
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <TWI_Master_Read_array+0x70>
		Status=TWSR&0xF8; 
 2bc:	11 b1       	in	r17, 0x01	; 1
 2be:	18 7f       	andi	r17, 0xF8	; 248
	if(Status !=_SLA_R_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //addresssend error, escape anyway

	//Get DATA array---------------------
	for (int i=0; i<len-1; i++){
		TWCR=TWI_Read_ACK; //start read data by cleaning TWINT, set ACK after read each byte
		while ((TWCR & 0x80)==0x00)
 2c0:	06 b6       	in	r0, 0x36	; 54
 2c2:	07 fe       	sbrs	r0, 7
 2c4:	fb cf       	rjmp	.-10     	; 0x2bc <TWI_Master_Read_array+0x66>
		Status=TWSR&0xF8; 
		if (Status!=_DATA_Rec_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;};	
 2c6:	10 35       	cpi	r17, 0x50	; 80
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <TWI_Master_Read_array+0x7e>
 2ca:	84 e9       	ldi	r24, 0x94	; 148
 2cc:	86 bf       	out	0x36, r24	; 54
 2ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 2d2:	22 c0       	rjmp	.+68     	; 0x318 <TWI_Master_Read_array+0xc2>
		rData[i]=TWDR;
 2d4:	53 b1       	in	r21, 0x03	; 3
 2d6:	51 93       	st	Z+, r21
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
	Status=TWSR&0xF8;
	if(Status !=_SLA_R_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;}; //addresssend error, escape anyway

	//Get DATA array---------------------
	for (int i=0; i<len-1; i++){
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	82 17       	cp	r24, r18
 2dc:	93 07       	cpc	r25, r19
 2de:	54 f3       	brlt	.-44     	; 0x2b4 <TWI_Master_Read_array+0x5e>
		if (Status!=_DATA_Rec_ACK) {TWCR=TWI_STOP; TWI_Init(); return Status;};	
		rData[i]=TWDR;
	}
	
	//get last byte---------------------
	TWCR=TWI_Clear_TWINT; //start read data by cleaning TWINT, set NOT ACK
 2e0:	84 e8       	ldi	r24, 0x84	; 132
 2e2:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80)==0x00)
 2e4:	06 b6       	in	r0, 0x36	; 54
 2e6:	07 fc       	sbrc	r0, 7
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <TWI_Master_Read_array+0x9e>
	Status=TWSR&0xF8;
 2ea:	11 b1       	in	r17, 0x01	; 1
 2ec:	18 7f       	andi	r17, 0xF8	; 248
		rData[i]=TWDR;
	}
	
	//get last byte---------------------
	TWCR=TWI_Clear_TWINT; //start read data by cleaning TWINT, set NOT ACK
	while ((TWCR & 0x80)==0x00)
 2ee:	06 b6       	in	r0, 0x36	; 54
 2f0:	07 fe       	sbrs	r0, 7
 2f2:	fb cf       	rjmp	.-10     	; 0x2ea <TWI_Master_Read_array+0x94>
	Status=TWSR&0xF8;
	if (Status !=_DATA_Rec_NACK) {TWCR=TWI_STOP; TWI_Init(); return Status;};
 2f4:	18 35       	cpi	r17, 0x58	; 88
 2f6:	29 f0       	breq	.+10     	; 0x302 <TWI_Master_Read_array+0xac>
 2f8:	84 e9       	ldi	r24, 0x94	; 148
 2fa:	86 bf       	out	0x36, r24	; 54
 2fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
 300:	0b c0       	rjmp	.+22     	; 0x318 <TWI_Master_Read_array+0xc2>
	rData[len-1]=TWDR;
 302:	83 b1       	in	r24, 0x03	; 3
 304:	64 0f       	add	r22, r20
 306:	71 1d       	adc	r23, r1
 308:	fb 01       	movw	r30, r22
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	80 83       	st	Z, r24
		
	//send the STOP condition
	TWCR=TWI_STOP;
 30e:	84 e9       	ldi	r24, 0x94	; 148
 310:	86 bf       	out	0x36, r24	; 54
	TWI_Init();
 312:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
	return 0;
 316:	10 e0       	ldi	r17, 0x00	; 0
}
 318:	81 2f       	mov	r24, r17
 31a:	1f 91       	pop	r17
 31c:	08 95       	ret

0000031e <__vector_19>:



//---------------------------------------------SLAVE INTERRUPT------------------------------
ISR(TWI_vect){
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
	uint8_t Status;
	Status=TWSR;
 330:	81 b1       	in	r24, 0x01	; 1
	PORTA=Status;
 332:	8b bb       	out	0x1b, r24	; 27
	
	//**********************SLAVE RECEIVER MODE******************
	switch (Status){
 334:	88 39       	cpi	r24, 0x98	; 152
 336:	09 f4       	brne	.+2      	; 0x33a <__vector_19+0x1c>
 338:	63 c0       	rjmp	.+198    	; 0x400 <__vector_19+0xe2>
 33a:	89 39       	cpi	r24, 0x99	; 153
 33c:	80 f4       	brcc	.+32     	; 0x35e <__vector_19+0x40>
 33e:	80 38       	cpi	r24, 0x80	; 128
 340:	49 f1       	breq	.+82     	; 0x394 <__vector_19+0x76>
 342:	81 38       	cpi	r24, 0x81	; 129
 344:	30 f4       	brcc	.+12     	; 0x352 <__vector_19+0x34>
 346:	80 36       	cpi	r24, 0x60	; 96
 348:	e9 f0       	breq	.+58     	; 0x384 <__vector_19+0x66>
 34a:	80 37       	cpi	r24, 0x70	; 112
 34c:	09 f0       	breq	.+2      	; 0x350 <__vector_19+0x32>
 34e:	97 c0       	rjmp	.+302    	; 0x47e <__vector_19+0x160>
 350:	3f c0       	rjmp	.+126    	; 0x3d0 <__vector_19+0xb2>
 352:	88 38       	cpi	r24, 0x88	; 136
 354:	71 f1       	breq	.+92     	; 0x3b2 <__vector_19+0x94>
 356:	80 39       	cpi	r24, 0x90	; 144
 358:	09 f0       	breq	.+2      	; 0x35c <__vector_19+0x3e>
 35a:	91 c0       	rjmp	.+290    	; 0x47e <__vector_19+0x160>
 35c:	42 c0       	rjmp	.+132    	; 0x3e2 <__vector_19+0xc4>
 35e:	80 3b       	cpi	r24, 0xB0	; 176
 360:	09 f4       	brne	.+2      	; 0x364 <__vector_19+0x46>
 362:	7e c0       	rjmp	.+252    	; 0x460 <__vector_19+0x142>
 364:	81 3b       	cpi	r24, 0xB1	; 177
 366:	38 f4       	brcc	.+14     	; 0x376 <__vector_19+0x58>
 368:	80 3a       	cpi	r24, 0xA0	; 160
 36a:	09 f4       	brne	.+2      	; 0x36e <__vector_19+0x50>
 36c:	58 c0       	rjmp	.+176    	; 0x41e <__vector_19+0x100>
 36e:	88 3a       	cpi	r24, 0xA8	; 168
 370:	09 f0       	breq	.+2      	; 0x374 <__vector_19+0x56>
 372:	85 c0       	rjmp	.+266    	; 0x47e <__vector_19+0x160>
 374:	58 c0       	rjmp	.+176    	; 0x426 <__vector_19+0x108>
 376:	88 3b       	cpi	r24, 0xB8	; 184
 378:	09 f4       	brne	.+2      	; 0x37c <__vector_19+0x5e>
 37a:	66 c0       	rjmp	.+204    	; 0x448 <__vector_19+0x12a>
 37c:	80 3c       	cpi	r24, 0xC0	; 192
 37e:	09 f0       	breq	.+2      	; 0x382 <__vector_19+0x64>
 380:	7e c0       	rjmp	.+252    	; 0x47e <__vector_19+0x160>
 382:	7a c0       	rjmp	.+244    	; 0x478 <__vector_19+0x15a>
	case OWN_ADDRESS_MATCH:		
		SLAVE_mode=0;
 384:	10 92 78 00 	sts	0x0078, r1
		Rec_Num=0;
 388:	10 92 77 00 	sts	0x0077, r1
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 38c:	86 b7       	in	r24, 0x36	; 54
 38e:	80 6c       	ori	r24, 0xC0	; 192
 390:	86 bf       	out	0x36, r24	; 54
		break;	
 392:	75 c0       	rjmp	.+234    	; 0x47e <__vector_19+0x160>
	case OWN_DATA_Rec_ACK:		
		SLAVE_buff[Rec_Num++]=TWDR;
 394:	80 91 77 00 	lds	r24, 0x0077
 398:	93 b1       	in	r25, 0x03	; 3
 39a:	e9 e7       	ldi	r30, 0x79	; 121
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	e8 0f       	add	r30, r24
 3a0:	f1 1d       	adc	r31, r1
 3a2:	90 83       	st	Z, r25
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 77 00 	sts	0x0077, r24
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 3aa:	86 b7       	in	r24, 0x36	; 54
 3ac:	80 6c       	ori	r24, 0xC0	; 192
 3ae:	86 bf       	out	0x36, r24	; 54
		break;
 3b0:	66 c0       	rjmp	.+204    	; 0x47e <__vector_19+0x160>
	case OWN_DATA_Rec_NACK:		
		SLAVE_buff[Rec_Num++]=TWDR;
 3b2:	80 91 77 00 	lds	r24, 0x0077
 3b6:	93 b1       	in	r25, 0x03	; 3
 3b8:	e9 e7       	ldi	r30, 0x79	; 121
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	e8 0f       	add	r30, r24
 3be:	f1 1d       	adc	r31, r1
 3c0:	90 83       	st	Z, r25
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 77 00 	sts	0x0077, r24
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 3c8:	86 b7       	in	r24, 0x36	; 54
 3ca:	80 6c       	ori	r24, 0xC0	; 192
 3cc:	86 bf       	out	0x36, r24	; 54
		break;	
 3ce:	57 c0       	rjmp	.+174    	; 0x47e <__vector_19+0x160>
	case GENERAL_MATCH:
		SLAVE_mode=1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 78 00 	sts	0x0078, r24
		Rec_Num=0;
 3d6:	10 92 77 00 	sts	0x0077, r1
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 3da:	86 b7       	in	r24, 0x36	; 54
 3dc:	80 6c       	ori	r24, 0xC0	; 192
 3de:	86 bf       	out	0x36, r24	; 54
		break;		
 3e0:	4e c0       	rjmp	.+156    	; 0x47e <__vector_19+0x160>
	case GENERAL_DATA_Rec_ACK:		
		SLAVE_buff[Rec_Num++]=TWDR;
 3e2:	80 91 77 00 	lds	r24, 0x0077
 3e6:	93 b1       	in	r25, 0x03	; 3
 3e8:	e9 e7       	ldi	r30, 0x79	; 121
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	e8 0f       	add	r30, r24
 3ee:	f1 1d       	adc	r31, r1
 3f0:	90 83       	st	Z, r25
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	80 93 77 00 	sts	0x0077, r24
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 3f8:	86 b7       	in	r24, 0x36	; 54
 3fa:	80 6c       	ori	r24, 0xC0	; 192
 3fc:	86 bf       	out	0x36, r24	; 54
		break;
 3fe:	3f c0       	rjmp	.+126    	; 0x47e <__vector_19+0x160>
	case GENERAL_DATA_Rec_NACK:		
		SLAVE_buff[Rec_Num++]=TWDR;
 400:	80 91 77 00 	lds	r24, 0x0077
 404:	93 b1       	in	r25, 0x03	; 3
 406:	e9 e7       	ldi	r30, 0x79	; 121
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	e8 0f       	add	r30, r24
 40c:	f1 1d       	adc	r31, r1
 40e:	90 83       	st	Z, r25
 410:	8f 5f       	subi	r24, 0xFF	; 255
 412:	80 93 77 00 	sts	0x0077, r24
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 416:	86 b7       	in	r24, 0x36	; 54
 418:	80 6c       	ori	r24, 0xC0	; 192
 41a:	86 bf       	out	0x36, r24	; 54
		break;	
 41c:	30 c0       	rjmp	.+96     	; 0x47e <__vector_19+0x160>
	case  STOP_Rec: 	
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK 
 41e:	86 b7       	in	r24, 0x36	; 54
 420:	80 6c       	ori	r24, 0xC0	; 192
 422:	86 bf       	out	0x36, r24	; 54
		break;
 424:	2c c0       	rjmp	.+88     	; 0x47e <__vector_19+0x160>
	//**********************END SLAVE RECEIVER MODE**************
	
	
	//--------------------SLAVE TRANSMITTER MODE----------------
	case ADDRESS_R_MATCH: 	//Match, Read is required
		Tran_Num++;
 426:	80 91 76 00 	lds	r24, 0x0076
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	80 93 76 00 	sts	0x0076, r24
		TWDR=SLAVE_wData[Tran_Num];
 430:	80 91 76 00 	lds	r24, 0x0076
 434:	ee ed       	ldi	r30, 0xDE	; 222
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	e8 0f       	add	r30, r24
 43a:	f1 1d       	adc	r31, r1
 43c:	80 81       	ld	r24, Z
 43e:	83 b9       	out	0x03, r24	; 3
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK
 440:	86 b7       	in	r24, 0x36	; 54
 442:	80 6c       	ori	r24, 0xC0	; 192
 444:	86 bf       	out	0x36, r24	; 54
		break;
 446:	1b c0       	rjmp	.+54     	; 0x47e <__vector_19+0x160>
	case DATA_Sent_ACK:  	//data have been sent, get ACK then now send more
		TWDR=SLAVE_wData[Tran_Num];
 448:	80 91 76 00 	lds	r24, 0x0076
 44c:	ee ed       	ldi	r30, 0xDE	; 222
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	e8 0f       	add	r30, r24
 452:	f1 1d       	adc	r31, r1
 454:	80 81       	ld	r24, Z
 456:	83 b9       	out	0x03, r24	; 3
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK
 458:	86 b7       	in	r24, 0x36	; 54
 45a:	80 6c       	ori	r24, 0xC0	; 192
 45c:	86 bf       	out	0x36, r24	; 54
		break;
 45e:	0f c0       	rjmp	.+30     	; 0x47e <__vector_19+0x160>
	case LOST_R_MATCH: 	 	//Lost Master but Match Read is required, so send data 
		TWDR=SLAVE_wData[Tran_Num];
 460:	80 91 76 00 	lds	r24, 0x0076
 464:	ee ed       	ldi	r30, 0xDE	; 222
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	e8 0f       	add	r30, r24
 46a:	f1 1d       	adc	r31, r1
 46c:	80 81       	ld	r24, Z
 46e:	83 b9       	out	0x03, r24	; 3
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK	
 470:	86 b7       	in	r24, 0x36	; 54
 472:	80 6c       	ori	r24, 0xC0	; 192
 474:	86 bf       	out	0x36, r24	; 54
		break;
 476:	03 c0       	rjmp	.+6      	; 0x47e <__vector_19+0x160>
	case DATA_Sent_NACK: 	//data have been sent, get NOT ACK then now stop, get back Slave mode		
		TWCR |=(1<<TWINT)|(1<<TWEA); //clear TWINT, set ACK
 478:	86 b7       	in	r24, 0x36	; 54
 47a:	80 6c       	ori	r24, 0xC0	; 192
 47c:	86 bf       	out	0x36, r24	; 54
		break;
	//--------------------END SLAVE TRANSMITTER MODE------------	
	default:
		break;
	}
}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <main>:
#include <stdio.h>
#include "myLCD.h"
#include "myTWI.h"
volatile uint8_t Slave_Addr;//dia chi Slave
//chuong trinh chinh
int main(void){
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	df 93       	push	r29
 496:	cf 93       	push	r28
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	e2 97       	sbiw	r28, 0x32	; 50
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t Data[50], i;//Data: du lieu tam thoi, goi cho Slaves
	TWI_Init();	//khoi dong TWI
 4a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWI_Init>
	init_LCD(); //khoi dong LCD
 4ac:	0e 94 89 00 	call	0x112	; 0x112 <init_LCD>
	clr_LCD();	
 4b0:	0e 94 b9 00 	call	0x172	; 0x172 <clr_LCD>
	
	//khoi dong ngat INT0----------------
	PORTD=0xFF;	//pull-up
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	82 bb       	out	0x12, r24	; 18
	DDRD=0x00;	
 4b8:	11 ba       	out	0x11, r1	; 17
	MCUCR	|=(1<<ISC01); // falling edge
 4ba:	85 b7       	in	r24, 0x35	; 53
 4bc:	82 60       	ori	r24, 0x02	; 2
 4be:	85 bf       	out	0x35, r24	; 53
    GICR    |=(1<<INT0);  // enable INT0
 4c0:	8b b7       	in	r24, 0x3b	; 59
 4c2:	80 64       	ori	r24, 0x40	; 64
 4c4:	8b bf       	out	0x3b, r24	; 59
	//----------------------------------	
	sei(); //global interrupt
 4c6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	87 ea       	ldi	r24, 0xA7	; 167
 4ca:	91 e6       	ldi	r25, 0x61	; 97
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <main+0x3c>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x42>
 4d2:	00 00       	nop
 4d4:	8e 01       	movw	r16, r28
 4d6:	0f 5f       	subi	r16, 0xFF	; 255
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	f8 01       	movw	r30, r16
		
	_delay_ms(100); //cho de cac Slaves san sang;	
	
	//thu goi 1 mang du lieu den Slave 2
	for (i=0; i< 50; i++) Data[i]=i;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	81 93       	st	Z+, r24
 4e0:	8f 5f       	subi	r24, 0xFF	; 255
 4e2:	82 33       	cpi	r24, 0x32	; 50
 4e4:	e1 f7       	brne	.-8      	; 0x4de <main+0x4e>
	TWI_Master_Send_array(2,Data,40);
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	be 01       	movw	r22, r28
 4ea:	6f 5f       	subi	r22, 0xFF	; 255
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	48 e2       	ldi	r20, 0x28	; 40
 4f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_Master_Send_array>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
	
	//thu goi 1 mang du lieu den Slave 3
	for (i=0; i< 50; i++) Data[i]=i*2;
 4f6:	f8 01       	movw	r30, r16
 4f8:	81 93       	st	Z+, r24
 4fa:	8f 01       	movw	r16, r30
 4fc:	8e 5f       	subi	r24, 0xFE	; 254
 4fe:	84 36       	cpi	r24, 0x64	; 100
 500:	d1 f7       	brne	.-12     	; 0x4f6 <main+0x66>
	TWI_Master_Send_array(3,Data,50);
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	be 01       	movw	r22, r28
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	42 e3       	ldi	r20, 0x32	; 50
 50c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_Master_Send_array>

	print_LCD("From Slave : ");	
 510:	80 e6       	ldi	r24, 0x60	; 96
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 c6 00 	call	0x18c	; 0x18c <print_LCD>
 518:	ff cf       	rjmp	.-2      	; 0x518 <main+0x88>

0000051a <__vector_1>:
	while(1){		
	}	
	return 0;
}
//trinh phuc vu ngat INT0 (nhan button)
ISR (INT0_vect){	
 51a:	1f 92       	push	r1
 51c:	0f 92       	push	r0
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	0f 92       	push	r0
 522:	11 24       	eor	r1, r1
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
 544:	df 93       	push	r29
 546:	cf 93       	push	r28
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	27 97       	sbiw	r28, 0x07	; 7
 54e:	de bf       	out	0x3e, r29	; 62
 550:	cd bf       	out	0x3d, r28	; 61
	uint8_t res, rData[2];
	char dis[5];
	Slave_Addr =PIND & 0x03; //xac dinh Slave de giao tiep
 552:	80 b3       	in	r24, 0x10	; 16
 554:	83 70       	andi	r24, 0x03	; 3
 556:	80 93 dd 00 	sts	0x00DD, r24
	res=TWI_Master_Read_array(Slave_Addr,rData,1); //Master nhan du lieu	
 55a:	80 91 dd 00 	lds	r24, 0x00DD
 55e:	be 01       	movw	r22, r28
 560:	6f 5f       	subi	r22, 0xFF	; 255
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	41 e0       	ldi	r20, 0x01	; 1
 566:	0e 94 2b 01 	call	0x256	; 0x256 <TWI_Master_Read_array>
	//in dia chi Slave len LCD (dong 1)
	move_LCD(1,12);
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	6c e0       	ldi	r22, 0x0C	; 12
 56e:	0e 94 ad 00 	call	0x15a	; 0x15a <move_LCD>
	sprintf(dis,"%i", Slave_Addr);	
 572:	80 91 dd 00 	lds	r24, 0x00DD
 576:	00 d0       	rcall	.+0      	; 0x578 <__vector_1+0x5e>
 578:	00 d0       	rcall	.+0      	; 0x57a <__vector_1+0x60>
 57a:	00 d0       	rcall	.+0      	; 0x57c <__vector_1+0x62>
 57c:	ed b7       	in	r30, 0x3d	; 61
 57e:	fe b7       	in	r31, 0x3e	; 62
 580:	31 96       	adiw	r30, 0x01	; 1
 582:	8e 01       	movw	r16, r28
 584:	0d 5f       	subi	r16, 0xFD	; 253
 586:	1f 4f       	sbci	r17, 0xFF	; 255
 588:	ad b7       	in	r26, 0x3d	; 61
 58a:	be b7       	in	r27, 0x3e	; 62
 58c:	12 96       	adiw	r26, 0x02	; 2
 58e:	1c 93       	st	X, r17
 590:	0e 93       	st	-X, r16
 592:	11 97       	sbiw	r26, 0x01	; 1
 594:	0f 2e       	mov	r0, r31
 596:	fe e6       	ldi	r31, 0x6E	; 110
 598:	ef 2e       	mov	r14, r31
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	ff 2e       	mov	r15, r31
 59e:	f0 2d       	mov	r31, r0
 5a0:	f3 82       	std	Z+3, r15	; 0x03
 5a2:	e2 82       	std	Z+2, r14	; 0x02
 5a4:	84 83       	std	Z+4, r24	; 0x04
 5a6:	15 82       	std	Z+5, r1	; 0x05
 5a8:	0e 94 25 03 	call	0x64a	; 0x64a <sprintf>
	print_LCD(dis);	
 5ac:	8d b7       	in	r24, 0x3d	; 61
 5ae:	9e b7       	in	r25, 0x3e	; 62
 5b0:	06 96       	adiw	r24, 0x06	; 6
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	9e bf       	out	0x3e, r25	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	8d bf       	out	0x3d, r24	; 61
 5bc:	c8 01       	movw	r24, r16
 5be:	0e 94 c6 00 	call	0x18c	; 0x18c <print_LCD>
	//in du lieu nhan tu Slave len LCD (dong 2)
	sprintf(dis,"%i", rData[0]);	
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <__vector_1+0xaa>
 5c4:	00 d0       	rcall	.+0      	; 0x5c6 <__vector_1+0xac>
 5c6:	00 d0       	rcall	.+0      	; 0x5c8 <__vector_1+0xae>
 5c8:	ed b7       	in	r30, 0x3d	; 61
 5ca:	fe b7       	in	r31, 0x3e	; 62
 5cc:	31 96       	adiw	r30, 0x01	; 1
 5ce:	ad b7       	in	r26, 0x3d	; 61
 5d0:	be b7       	in	r27, 0x3e	; 62
 5d2:	12 96       	adiw	r26, 0x02	; 2
 5d4:	1c 93       	st	X, r17
 5d6:	0e 93       	st	-X, r16
 5d8:	11 97       	sbiw	r26, 0x01	; 1
 5da:	f3 82       	std	Z+3, r15	; 0x03
 5dc:	e2 82       	std	Z+2, r14	; 0x02
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	84 83       	std	Z+4, r24	; 0x04
 5e2:	15 82       	std	Z+5, r1	; 0x05
 5e4:	0e 94 25 03 	call	0x64a	; 0x64a <sprintf>
	move_LCD(2,1);
 5e8:	8d b7       	in	r24, 0x3d	; 61
 5ea:	9e b7       	in	r25, 0x3e	; 62
 5ec:	06 96       	adiw	r24, 0x06	; 6
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	9e bf       	out	0x3e, r25	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	8d bf       	out	0x3d, r24	; 61
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	0e 94 ad 00 	call	0x15a	; 0x15a <move_LCD>
	print_LCD("   ");
 600:	81 e7       	ldi	r24, 0x71	; 113
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 c6 00 	call	0x18c	; 0x18c <print_LCD>
	move_LCD(2,1);
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	0e 94 ad 00 	call	0x15a	; 0x15a <move_LCD>
	print_LCD(dis);
 610:	c8 01       	movw	r24, r16
 612:	0e 94 c6 00 	call	0x18c	; 0x18c <print_LCD>
 616:	27 96       	adiw	r28, 0x07	; 7
 618:	de bf       	out	0x3e, r29	; 62
 61a:	cd bf       	out	0x3d, r28	; 61
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	ff 90       	pop	r15
 63e:	ef 90       	pop	r14
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <sprintf>:
 64a:	ae e0       	ldi	r26, 0x0E	; 14
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	eb e2       	ldi	r30, 0x2B	; 43
 650:	f3 e0       	ldi	r31, 0x03	; 3
 652:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__prologue_saves__+0x1c>
 656:	0d 89       	ldd	r16, Y+21	; 0x15
 658:	1e 89       	ldd	r17, Y+22	; 0x16
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	8c 83       	std	Y+4, r24	; 0x04
 65e:	1a 83       	std	Y+2, r17	; 0x02
 660:	09 83       	std	Y+1, r16	; 0x01
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	9f e7       	ldi	r25, 0x7F	; 127
 666:	9e 83       	std	Y+6, r25	; 0x06
 668:	8d 83       	std	Y+5, r24	; 0x05
 66a:	9e 01       	movw	r18, r28
 66c:	27 5e       	subi	r18, 0xE7	; 231
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
 670:	ce 01       	movw	r24, r28
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	6f 89       	ldd	r22, Y+23	; 0x17
 676:	78 8d       	ldd	r23, Y+24	; 0x18
 678:	a9 01       	movw	r20, r18
 67a:	0e 94 48 03 	call	0x690	; 0x690 <vfprintf>
 67e:	ef 81       	ldd	r30, Y+7	; 0x07
 680:	f8 85       	ldd	r31, Y+8	; 0x08
 682:	e0 0f       	add	r30, r16
 684:	f1 1f       	adc	r31, r17
 686:	10 82       	st	Z, r1
 688:	2e 96       	adiw	r28, 0x0e	; 14
 68a:	e4 e0       	ldi	r30, 0x04	; 4
 68c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__epilogue_restores__+0x1c>

00000690 <vfprintf>:
 690:	ac e0       	ldi	r26, 0x0C	; 12
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	ee e4       	ldi	r30, 0x4E	; 78
 696:	f3 e0       	ldi	r31, 0x03	; 3
 698:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__prologue_saves__>
 69c:	6c 01       	movw	r12, r24
 69e:	1b 01       	movw	r2, r22
 6a0:	8a 01       	movw	r16, r20
 6a2:	fc 01       	movw	r30, r24
 6a4:	17 82       	std	Z+7, r1	; 0x07
 6a6:	16 82       	std	Z+6, r1	; 0x06
 6a8:	83 81       	ldd	r24, Z+3	; 0x03
 6aa:	81 ff       	sbrs	r24, 1
 6ac:	d1 c1       	rjmp	.+930    	; 0xa50 <__stack+0x1f1>
 6ae:	2e 01       	movw	r4, r28
 6b0:	08 94       	sec
 6b2:	41 1c       	adc	r4, r1
 6b4:	51 1c       	adc	r5, r1
 6b6:	f6 01       	movw	r30, r12
 6b8:	93 81       	ldd	r25, Z+3	; 0x03
 6ba:	f1 01       	movw	r30, r2
 6bc:	93 fd       	sbrc	r25, 3
 6be:	85 91       	lpm	r24, Z+
 6c0:	93 ff       	sbrs	r25, 3
 6c2:	81 91       	ld	r24, Z+
 6c4:	1f 01       	movw	r2, r30
 6c6:	88 23       	and	r24, r24
 6c8:	09 f4       	brne	.+2      	; 0x6cc <vfprintf+0x3c>
 6ca:	be c1       	rjmp	.+892    	; 0xa48 <__stack+0x1e9>
 6cc:	85 32       	cpi	r24, 0x25	; 37
 6ce:	39 f4       	brne	.+14     	; 0x6de <vfprintf+0x4e>
 6d0:	93 fd       	sbrc	r25, 3
 6d2:	85 91       	lpm	r24, Z+
 6d4:	93 ff       	sbrs	r25, 3
 6d6:	81 91       	ld	r24, Z+
 6d8:	1f 01       	movw	r2, r30
 6da:	85 32       	cpi	r24, 0x25	; 37
 6dc:	29 f4       	brne	.+10     	; 0x6e8 <vfprintf+0x58>
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	b6 01       	movw	r22, r12
 6e2:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 6e6:	e7 cf       	rjmp	.-50     	; 0x6b6 <vfprintf+0x26>
 6e8:	ee 24       	eor	r14, r14
 6ea:	ff 24       	eor	r15, r15
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	20 32       	cpi	r18, 0x20	; 32
 6f0:	b0 f4       	brcc	.+44     	; 0x71e <vfprintf+0x8e>
 6f2:	8b 32       	cpi	r24, 0x2B	; 43
 6f4:	69 f0       	breq	.+26     	; 0x710 <vfprintf+0x80>
 6f6:	8c 32       	cpi	r24, 0x2C	; 44
 6f8:	28 f4       	brcc	.+10     	; 0x704 <vfprintf+0x74>
 6fa:	80 32       	cpi	r24, 0x20	; 32
 6fc:	51 f0       	breq	.+20     	; 0x712 <vfprintf+0x82>
 6fe:	83 32       	cpi	r24, 0x23	; 35
 700:	71 f4       	brne	.+28     	; 0x71e <vfprintf+0x8e>
 702:	0b c0       	rjmp	.+22     	; 0x71a <vfprintf+0x8a>
 704:	8d 32       	cpi	r24, 0x2D	; 45
 706:	39 f0       	breq	.+14     	; 0x716 <vfprintf+0x86>
 708:	80 33       	cpi	r24, 0x30	; 48
 70a:	49 f4       	brne	.+18     	; 0x71e <vfprintf+0x8e>
 70c:	21 60       	ori	r18, 0x01	; 1
 70e:	2c c0       	rjmp	.+88     	; 0x768 <vfprintf+0xd8>
 710:	22 60       	ori	r18, 0x02	; 2
 712:	24 60       	ori	r18, 0x04	; 4
 714:	29 c0       	rjmp	.+82     	; 0x768 <vfprintf+0xd8>
 716:	28 60       	ori	r18, 0x08	; 8
 718:	27 c0       	rjmp	.+78     	; 0x768 <vfprintf+0xd8>
 71a:	20 61       	ori	r18, 0x10	; 16
 71c:	25 c0       	rjmp	.+74     	; 0x768 <vfprintf+0xd8>
 71e:	27 fd       	sbrc	r18, 7
 720:	2c c0       	rjmp	.+88     	; 0x77a <vfprintf+0xea>
 722:	38 2f       	mov	r19, r24
 724:	30 53       	subi	r19, 0x30	; 48
 726:	3a 30       	cpi	r19, 0x0A	; 10
 728:	98 f4       	brcc	.+38     	; 0x750 <vfprintf+0xc0>
 72a:	26 ff       	sbrs	r18, 6
 72c:	08 c0       	rjmp	.+16     	; 0x73e <vfprintf+0xae>
 72e:	8e 2d       	mov	r24, r14
 730:	88 0f       	add	r24, r24
 732:	e8 2e       	mov	r14, r24
 734:	ee 0c       	add	r14, r14
 736:	ee 0c       	add	r14, r14
 738:	e8 0e       	add	r14, r24
 73a:	e3 0e       	add	r14, r19
 73c:	15 c0       	rjmp	.+42     	; 0x768 <vfprintf+0xd8>
 73e:	8f 2d       	mov	r24, r15
 740:	88 0f       	add	r24, r24
 742:	f8 2e       	mov	r15, r24
 744:	ff 0c       	add	r15, r15
 746:	ff 0c       	add	r15, r15
 748:	f8 0e       	add	r15, r24
 74a:	f3 0e       	add	r15, r19
 74c:	20 62       	ori	r18, 0x20	; 32
 74e:	0c c0       	rjmp	.+24     	; 0x768 <vfprintf+0xd8>
 750:	8e 32       	cpi	r24, 0x2E	; 46
 752:	21 f4       	brne	.+8      	; 0x75c <vfprintf+0xcc>
 754:	26 fd       	sbrc	r18, 6
 756:	78 c1       	rjmp	.+752    	; 0xa48 <__stack+0x1e9>
 758:	20 64       	ori	r18, 0x40	; 64
 75a:	06 c0       	rjmp	.+12     	; 0x768 <vfprintf+0xd8>
 75c:	8c 36       	cpi	r24, 0x6C	; 108
 75e:	11 f4       	brne	.+4      	; 0x764 <vfprintf+0xd4>
 760:	20 68       	ori	r18, 0x80	; 128
 762:	02 c0       	rjmp	.+4      	; 0x768 <vfprintf+0xd8>
 764:	88 36       	cpi	r24, 0x68	; 104
 766:	49 f4       	brne	.+18     	; 0x77a <vfprintf+0xea>
 768:	f1 01       	movw	r30, r2
 76a:	93 fd       	sbrc	r25, 3
 76c:	85 91       	lpm	r24, Z+
 76e:	93 ff       	sbrs	r25, 3
 770:	81 91       	ld	r24, Z+
 772:	1f 01       	movw	r2, r30
 774:	88 23       	and	r24, r24
 776:	09 f0       	breq	.+2      	; 0x77a <vfprintf+0xea>
 778:	ba cf       	rjmp	.-140    	; 0x6ee <vfprintf+0x5e>
 77a:	98 2f       	mov	r25, r24
 77c:	95 54       	subi	r25, 0x45	; 69
 77e:	93 30       	cpi	r25, 0x03	; 3
 780:	18 f0       	brcs	.+6      	; 0x788 <vfprintf+0xf8>
 782:	90 52       	subi	r25, 0x20	; 32
 784:	93 30       	cpi	r25, 0x03	; 3
 786:	28 f4       	brcc	.+10     	; 0x792 <vfprintf+0x102>
 788:	0c 5f       	subi	r16, 0xFC	; 252
 78a:	1f 4f       	sbci	r17, 0xFF	; 255
 78c:	ff e3       	ldi	r31, 0x3F	; 63
 78e:	f9 83       	std	Y+1, r31	; 0x01
 790:	0d c0       	rjmp	.+26     	; 0x7ac <vfprintf+0x11c>
 792:	83 36       	cpi	r24, 0x63	; 99
 794:	31 f0       	breq	.+12     	; 0x7a2 <vfprintf+0x112>
 796:	83 37       	cpi	r24, 0x73	; 115
 798:	71 f0       	breq	.+28     	; 0x7b6 <vfprintf+0x126>
 79a:	83 35       	cpi	r24, 0x53	; 83
 79c:	09 f0       	breq	.+2      	; 0x7a0 <vfprintf+0x110>
 79e:	60 c0       	rjmp	.+192    	; 0x860 <__stack+0x1>
 7a0:	22 c0       	rjmp	.+68     	; 0x7e6 <vfprintf+0x156>
 7a2:	f8 01       	movw	r30, r16
 7a4:	80 81       	ld	r24, Z
 7a6:	89 83       	std	Y+1, r24	; 0x01
 7a8:	0e 5f       	subi	r16, 0xFE	; 254
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	42 01       	movw	r8, r4
 7ae:	71 e0       	ldi	r23, 0x01	; 1
 7b0:	a7 2e       	mov	r10, r23
 7b2:	b1 2c       	mov	r11, r1
 7b4:	16 c0       	rjmp	.+44     	; 0x7e2 <vfprintf+0x152>
 7b6:	62 e0       	ldi	r22, 0x02	; 2
 7b8:	66 2e       	mov	r6, r22
 7ba:	71 2c       	mov	r7, r1
 7bc:	60 0e       	add	r6, r16
 7be:	71 1e       	adc	r7, r17
 7c0:	f8 01       	movw	r30, r16
 7c2:	80 80       	ld	r8, Z
 7c4:	91 80       	ldd	r9, Z+1	; 0x01
 7c6:	26 ff       	sbrs	r18, 6
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <vfprintf+0x140>
 7ca:	6e 2d       	mov	r22, r14
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x144>
 7d0:	6f ef       	ldi	r22, 0xFF	; 255
 7d2:	7f ef       	ldi	r23, 0xFF	; 255
 7d4:	c4 01       	movw	r24, r8
 7d6:	2c 87       	std	Y+12, r18	; 0x0c
 7d8:	0e 94 3a 05 	call	0xa74	; 0xa74 <strnlen>
 7dc:	5c 01       	movw	r10, r24
 7de:	83 01       	movw	r16, r6
 7e0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7e2:	2f 77       	andi	r18, 0x7F	; 127
 7e4:	17 c0       	rjmp	.+46     	; 0x814 <vfprintf+0x184>
 7e6:	52 e0       	ldi	r21, 0x02	; 2
 7e8:	65 2e       	mov	r6, r21
 7ea:	71 2c       	mov	r7, r1
 7ec:	60 0e       	add	r6, r16
 7ee:	71 1e       	adc	r7, r17
 7f0:	f8 01       	movw	r30, r16
 7f2:	80 80       	ld	r8, Z
 7f4:	91 80       	ldd	r9, Z+1	; 0x01
 7f6:	26 ff       	sbrs	r18, 6
 7f8:	03 c0       	rjmp	.+6      	; 0x800 <vfprintf+0x170>
 7fa:	6e 2d       	mov	r22, r14
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <vfprintf+0x174>
 800:	6f ef       	ldi	r22, 0xFF	; 255
 802:	7f ef       	ldi	r23, 0xFF	; 255
 804:	c4 01       	movw	r24, r8
 806:	2c 87       	std	Y+12, r18	; 0x0c
 808:	0e 94 2f 05 	call	0xa5e	; 0xa5e <strnlen_P>
 80c:	5c 01       	movw	r10, r24
 80e:	2c 85       	ldd	r18, Y+12	; 0x0c
 810:	20 68       	ori	r18, 0x80	; 128
 812:	83 01       	movw	r16, r6
 814:	23 fd       	sbrc	r18, 3
 816:	20 c0       	rjmp	.+64     	; 0x858 <vfprintf+0x1c8>
 818:	08 c0       	rjmp	.+16     	; 0x82a <vfprintf+0x19a>
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	b6 01       	movw	r22, r12
 820:	2c 87       	std	Y+12, r18	; 0x0c
 822:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 826:	fa 94       	dec	r15
 828:	2c 85       	ldd	r18, Y+12	; 0x0c
 82a:	8f 2d       	mov	r24, r15
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	a8 16       	cp	r10, r24
 830:	b9 06       	cpc	r11, r25
 832:	98 f3       	brcs	.-26     	; 0x81a <vfprintf+0x18a>
 834:	11 c0       	rjmp	.+34     	; 0x858 <vfprintf+0x1c8>
 836:	f4 01       	movw	r30, r8
 838:	27 fd       	sbrc	r18, 7
 83a:	85 91       	lpm	r24, Z+
 83c:	27 ff       	sbrs	r18, 7
 83e:	81 91       	ld	r24, Z+
 840:	4f 01       	movw	r8, r30
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	b6 01       	movw	r22, r12
 846:	2c 87       	std	Y+12, r18	; 0x0c
 848:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 84c:	2c 85       	ldd	r18, Y+12	; 0x0c
 84e:	f1 10       	cpse	r15, r1
 850:	fa 94       	dec	r15
 852:	08 94       	sec
 854:	a1 08       	sbc	r10, r1
 856:	b1 08       	sbc	r11, r1
 858:	a1 14       	cp	r10, r1
 85a:	b1 04       	cpc	r11, r1
 85c:	61 f7       	brne	.-40     	; 0x836 <vfprintf+0x1a6>
 85e:	f1 c0       	rjmp	.+482    	; 0xa42 <__stack+0x1e3>
 860:	84 36       	cpi	r24, 0x64	; 100
 862:	11 f0       	breq	.+4      	; 0x868 <__stack+0x9>
 864:	89 36       	cpi	r24, 0x69	; 105
 866:	49 f5       	brne	.+82     	; 0x8ba <__stack+0x5b>
 868:	27 ff       	sbrs	r18, 7
 86a:	08 c0       	rjmp	.+16     	; 0x87c <__stack+0x1d>
 86c:	f8 01       	movw	r30, r16
 86e:	60 81       	ld	r22, Z
 870:	71 81       	ldd	r23, Z+1	; 0x01
 872:	82 81       	ldd	r24, Z+2	; 0x02
 874:	93 81       	ldd	r25, Z+3	; 0x03
 876:	0c 5f       	subi	r16, 0xFC	; 252
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	09 c0       	rjmp	.+18     	; 0x88e <__stack+0x2f>
 87c:	f8 01       	movw	r30, r16
 87e:	60 81       	ld	r22, Z
 880:	71 81       	ldd	r23, Z+1	; 0x01
 882:	88 27       	eor	r24, r24
 884:	77 fd       	sbrc	r23, 7
 886:	80 95       	com	r24
 888:	98 2f       	mov	r25, r24
 88a:	0e 5f       	subi	r16, 0xFE	; 254
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	4f e6       	ldi	r20, 0x6F	; 111
 890:	b4 2e       	mov	r11, r20
 892:	b2 22       	and	r11, r18
 894:	97 ff       	sbrs	r25, 7
 896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
 898:	90 95       	com	r25
 89a:	80 95       	com	r24
 89c:	70 95       	com	r23
 89e:	61 95       	neg	r22
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	f0 e8       	ldi	r31, 0x80	; 128
 8a8:	bf 2a       	or	r11, r31
 8aa:	a2 01       	movw	r20, r4
 8ac:	2a e0       	ldi	r18, 0x0A	; 10
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	0e 94 71 05 	call	0xae2	; 0xae2 <__ultoa_invert>
 8b4:	78 2e       	mov	r7, r24
 8b6:	74 18       	sub	r7, r4
 8b8:	45 c0       	rjmp	.+138    	; 0x944 <__stack+0xe5>
 8ba:	85 37       	cpi	r24, 0x75	; 117
 8bc:	31 f4       	brne	.+12     	; 0x8ca <__stack+0x6b>
 8be:	3f ee       	ldi	r19, 0xEF	; 239
 8c0:	b3 2e       	mov	r11, r19
 8c2:	b2 22       	and	r11, r18
 8c4:	2a e0       	ldi	r18, 0x0A	; 10
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	25 c0       	rjmp	.+74     	; 0x914 <__stack+0xb5>
 8ca:	99 ef       	ldi	r25, 0xF9	; 249
 8cc:	b9 2e       	mov	r11, r25
 8ce:	b2 22       	and	r11, r18
 8d0:	8f 36       	cpi	r24, 0x6F	; 111
 8d2:	c1 f0       	breq	.+48     	; 0x904 <__stack+0xa5>
 8d4:	80 37       	cpi	r24, 0x70	; 112
 8d6:	20 f4       	brcc	.+8      	; 0x8e0 <__stack+0x81>
 8d8:	88 35       	cpi	r24, 0x58	; 88
 8da:	09 f0       	breq	.+2      	; 0x8de <__stack+0x7f>
 8dc:	b5 c0       	rjmp	.+362    	; 0xa48 <__stack+0x1e9>
 8de:	0d c0       	rjmp	.+26     	; 0x8fa <__stack+0x9b>
 8e0:	80 37       	cpi	r24, 0x70	; 112
 8e2:	21 f0       	breq	.+8      	; 0x8ec <__stack+0x8d>
 8e4:	88 37       	cpi	r24, 0x78	; 120
 8e6:	09 f0       	breq	.+2      	; 0x8ea <__stack+0x8b>
 8e8:	af c0       	rjmp	.+350    	; 0xa48 <__stack+0x1e9>
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__stack+0x91>
 8ec:	20 e1       	ldi	r18, 0x10	; 16
 8ee:	b2 2a       	or	r11, r18
 8f0:	b4 fe       	sbrs	r11, 4
 8f2:	0b c0       	rjmp	.+22     	; 0x90a <__stack+0xab>
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	b8 2a       	or	r11, r24
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <__stack+0xab>
 8fa:	b4 fe       	sbrs	r11, 4
 8fc:	09 c0       	rjmp	.+18     	; 0x910 <__stack+0xb1>
 8fe:	e6 e0       	ldi	r30, 0x06	; 6
 900:	be 2a       	or	r11, r30
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0xb1>
 904:	28 e0       	ldi	r18, 0x08	; 8
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	05 c0       	rjmp	.+10     	; 0x914 <__stack+0xb5>
 90a:	20 e1       	ldi	r18, 0x10	; 16
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0xb5>
 910:	20 e1       	ldi	r18, 0x10	; 16
 912:	32 e0       	ldi	r19, 0x02	; 2
 914:	b7 fe       	sbrs	r11, 7
 916:	08 c0       	rjmp	.+16     	; 0x928 <__stack+0xc9>
 918:	f8 01       	movw	r30, r16
 91a:	60 81       	ld	r22, Z
 91c:	71 81       	ldd	r23, Z+1	; 0x01
 91e:	82 81       	ldd	r24, Z+2	; 0x02
 920:	93 81       	ldd	r25, Z+3	; 0x03
 922:	0c 5f       	subi	r16, 0xFC	; 252
 924:	1f 4f       	sbci	r17, 0xFF	; 255
 926:	07 c0       	rjmp	.+14     	; 0x936 <__stack+0xd7>
 928:	f8 01       	movw	r30, r16
 92a:	60 81       	ld	r22, Z
 92c:	71 81       	ldd	r23, Z+1	; 0x01
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 5f       	subi	r16, 0xFE	; 254
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	a2 01       	movw	r20, r4
 938:	0e 94 71 05 	call	0xae2	; 0xae2 <__ultoa_invert>
 93c:	78 2e       	mov	r7, r24
 93e:	74 18       	sub	r7, r4
 940:	ff e7       	ldi	r31, 0x7F	; 127
 942:	bf 22       	and	r11, r31
 944:	b6 fe       	sbrs	r11, 6
 946:	0b c0       	rjmp	.+22     	; 0x95e <__stack+0xff>
 948:	2e ef       	ldi	r18, 0xFE	; 254
 94a:	b2 22       	and	r11, r18
 94c:	7e 14       	cp	r7, r14
 94e:	38 f4       	brcc	.+14     	; 0x95e <__stack+0xff>
 950:	b4 fe       	sbrs	r11, 4
 952:	07 c0       	rjmp	.+14     	; 0x962 <__stack+0x103>
 954:	b2 fc       	sbrc	r11, 2
 956:	05 c0       	rjmp	.+10     	; 0x962 <__stack+0x103>
 958:	8f ee       	ldi	r24, 0xEF	; 239
 95a:	b8 22       	and	r11, r24
 95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x103>
 95e:	a7 2c       	mov	r10, r7
 960:	01 c0       	rjmp	.+2      	; 0x964 <__stack+0x105>
 962:	ae 2c       	mov	r10, r14
 964:	8b 2d       	mov	r24, r11
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	b4 fe       	sbrs	r11, 4
 96a:	0d c0       	rjmp	.+26     	; 0x986 <__stack+0x127>
 96c:	fe 01       	movw	r30, r28
 96e:	e7 0d       	add	r30, r7
 970:	f1 1d       	adc	r31, r1
 972:	20 81       	ld	r18, Z
 974:	20 33       	cpi	r18, 0x30	; 48
 976:	19 f4       	brne	.+6      	; 0x97e <__stack+0x11f>
 978:	e9 ee       	ldi	r30, 0xE9	; 233
 97a:	be 22       	and	r11, r30
 97c:	09 c0       	rjmp	.+18     	; 0x990 <__stack+0x131>
 97e:	a3 94       	inc	r10
 980:	b2 fe       	sbrs	r11, 2
 982:	06 c0       	rjmp	.+12     	; 0x990 <__stack+0x131>
 984:	04 c0       	rjmp	.+8      	; 0x98e <__stack+0x12f>
 986:	86 78       	andi	r24, 0x86	; 134
 988:	90 70       	andi	r25, 0x00	; 0
 98a:	00 97       	sbiw	r24, 0x00	; 0
 98c:	09 f0       	breq	.+2      	; 0x990 <__stack+0x131>
 98e:	a3 94       	inc	r10
 990:	8b 2c       	mov	r8, r11
 992:	99 24       	eor	r9, r9
 994:	b3 fc       	sbrc	r11, 3
 996:	14 c0       	rjmp	.+40     	; 0x9c0 <__stack+0x161>
 998:	b0 fe       	sbrs	r11, 0
 99a:	0f c0       	rjmp	.+30     	; 0x9ba <__stack+0x15b>
 99c:	af 14       	cp	r10, r15
 99e:	28 f4       	brcc	.+10     	; 0x9aa <__stack+0x14b>
 9a0:	e7 2c       	mov	r14, r7
 9a2:	ef 0c       	add	r14, r15
 9a4:	ea 18       	sub	r14, r10
 9a6:	af 2c       	mov	r10, r15
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <__stack+0x15b>
 9aa:	e7 2c       	mov	r14, r7
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <__stack+0x15b>
 9ae:	80 e2       	ldi	r24, 0x20	; 32
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	b6 01       	movw	r22, r12
 9b4:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 9b8:	a3 94       	inc	r10
 9ba:	af 14       	cp	r10, r15
 9bc:	c0 f3       	brcs	.-16     	; 0x9ae <__stack+0x14f>
 9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__stack+0x169>
 9c0:	af 14       	cp	r10, r15
 9c2:	10 f4       	brcc	.+4      	; 0x9c8 <__stack+0x169>
 9c4:	fa 18       	sub	r15, r10
 9c6:	01 c0       	rjmp	.+2      	; 0x9ca <__stack+0x16b>
 9c8:	ff 24       	eor	r15, r15
 9ca:	84 fe       	sbrs	r8, 4
 9cc:	0f c0       	rjmp	.+30     	; 0x9ec <__stack+0x18d>
 9ce:	80 e3       	ldi	r24, 0x30	; 48
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	b6 01       	movw	r22, r12
 9d4:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 9d8:	82 fe       	sbrs	r8, 2
 9da:	1f c0       	rjmp	.+62     	; 0xa1a <__stack+0x1bb>
 9dc:	81 fe       	sbrs	r8, 1
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <__stack+0x187>
 9e0:	88 e5       	ldi	r24, 0x58	; 88
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	10 c0       	rjmp	.+32     	; 0xa06 <__stack+0x1a7>
 9e6:	88 e7       	ldi	r24, 0x78	; 120
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__stack+0x1a7>
 9ec:	c4 01       	movw	r24, r8
 9ee:	86 78       	andi	r24, 0x86	; 134
 9f0:	90 70       	andi	r25, 0x00	; 0
 9f2:	00 97       	sbiw	r24, 0x00	; 0
 9f4:	91 f0       	breq	.+36     	; 0xa1a <__stack+0x1bb>
 9f6:	81 fc       	sbrc	r8, 1
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0x19f>
 9fa:	80 e2       	ldi	r24, 0x20	; 32
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <__stack+0x1a1>
 9fe:	8b e2       	ldi	r24, 0x2B	; 43
 a00:	b7 fc       	sbrc	r11, 7
 a02:	8d e2       	ldi	r24, 0x2D	; 45
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	b6 01       	movw	r22, r12
 a08:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <__stack+0x1bb>
 a0e:	80 e3       	ldi	r24, 0x30	; 48
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	b6 01       	movw	r22, r12
 a14:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 a18:	ea 94       	dec	r14
 a1a:	7e 14       	cp	r7, r14
 a1c:	c0 f3       	brcs	.-16     	; 0xa0e <__stack+0x1af>
 a1e:	7a 94       	dec	r7
 a20:	f2 01       	movw	r30, r4
 a22:	e7 0d       	add	r30, r7
 a24:	f1 1d       	adc	r31, r1
 a26:	80 81       	ld	r24, Z
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	b6 01       	movw	r22, r12
 a2c:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 a30:	77 20       	and	r7, r7
 a32:	a9 f7       	brne	.-22     	; 0xa1e <__stack+0x1bf>
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <__stack+0x1e3>
 a36:	80 e2       	ldi	r24, 0x20	; 32
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	b6 01       	movw	r22, r12
 a3c:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 a40:	fa 94       	dec	r15
 a42:	ff 20       	and	r15, r15
 a44:	c1 f7       	brne	.-16     	; 0xa36 <__stack+0x1d7>
 a46:	37 ce       	rjmp	.-914    	; 0x6b6 <vfprintf+0x26>
 a48:	f6 01       	movw	r30, r12
 a4a:	26 81       	ldd	r18, Z+6	; 0x06
 a4c:	37 81       	ldd	r19, Z+7	; 0x07
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <__stack+0x1f5>
 a50:	2f ef       	ldi	r18, 0xFF	; 255
 a52:	3f ef       	ldi	r19, 0xFF	; 255
 a54:	c9 01       	movw	r24, r18
 a56:	2c 96       	adiw	r28, 0x0c	; 12
 a58:	e2 e1       	ldi	r30, 0x12	; 18
 a5a:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__epilogue_restores__>

00000a5e <strnlen_P>:
 a5e:	fc 01       	movw	r30, r24
 a60:	05 90       	lpm	r0, Z+
 a62:	61 50       	subi	r22, 0x01	; 1
 a64:	70 40       	sbci	r23, 0x00	; 0
 a66:	01 10       	cpse	r0, r1
 a68:	d8 f7       	brcc	.-10     	; 0xa60 <strnlen_P+0x2>
 a6a:	80 95       	com	r24
 a6c:	90 95       	com	r25
 a6e:	8e 0f       	add	r24, r30
 a70:	9f 1f       	adc	r25, r31
 a72:	08 95       	ret

00000a74 <strnlen>:
 a74:	fc 01       	movw	r30, r24
 a76:	61 50       	subi	r22, 0x01	; 1
 a78:	70 40       	sbci	r23, 0x00	; 0
 a7a:	01 90       	ld	r0, Z+
 a7c:	01 10       	cpse	r0, r1
 a7e:	d8 f7       	brcc	.-10     	; 0xa76 <strnlen+0x2>
 a80:	80 95       	com	r24
 a82:	90 95       	com	r25
 a84:	8e 0f       	add	r24, r30
 a86:	9f 1f       	adc	r25, r31
 a88:	08 95       	ret

00000a8a <fputc>:
 a8a:	0f 93       	push	r16
 a8c:	1f 93       	push	r17
 a8e:	cf 93       	push	r28
 a90:	df 93       	push	r29
 a92:	8c 01       	movw	r16, r24
 a94:	eb 01       	movw	r28, r22
 a96:	8b 81       	ldd	r24, Y+3	; 0x03
 a98:	81 ff       	sbrs	r24, 1
 a9a:	1b c0       	rjmp	.+54     	; 0xad2 <fputc+0x48>
 a9c:	82 ff       	sbrs	r24, 2
 a9e:	0d c0       	rjmp	.+26     	; 0xaba <fputc+0x30>
 aa0:	2e 81       	ldd	r18, Y+6	; 0x06
 aa2:	3f 81       	ldd	r19, Y+7	; 0x07
 aa4:	8c 81       	ldd	r24, Y+4	; 0x04
 aa6:	9d 81       	ldd	r25, Y+5	; 0x05
 aa8:	28 17       	cp	r18, r24
 aaa:	39 07       	cpc	r19, r25
 aac:	64 f4       	brge	.+24     	; 0xac6 <fputc+0x3c>
 aae:	e8 81       	ld	r30, Y
 ab0:	f9 81       	ldd	r31, Y+1	; 0x01
 ab2:	01 93       	st	Z+, r16
 ab4:	f9 83       	std	Y+1, r31	; 0x01
 ab6:	e8 83       	st	Y, r30
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <fputc+0x3c>
 aba:	e8 85       	ldd	r30, Y+8	; 0x08
 abc:	f9 85       	ldd	r31, Y+9	; 0x09
 abe:	80 2f       	mov	r24, r16
 ac0:	09 95       	icall
 ac2:	00 97       	sbiw	r24, 0x00	; 0
 ac4:	31 f4       	brne	.+12     	; 0xad2 <fputc+0x48>
 ac6:	8e 81       	ldd	r24, Y+6	; 0x06
 ac8:	9f 81       	ldd	r25, Y+7	; 0x07
 aca:	01 96       	adiw	r24, 0x01	; 1
 acc:	9f 83       	std	Y+7, r25	; 0x07
 ace:	8e 83       	std	Y+6, r24	; 0x06
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <fputc+0x4c>
 ad2:	0f ef       	ldi	r16, 0xFF	; 255
 ad4:	1f ef       	ldi	r17, 0xFF	; 255
 ad6:	c8 01       	movw	r24, r16
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	1f 91       	pop	r17
 ade:	0f 91       	pop	r16
 ae0:	08 95       	ret

00000ae2 <__ultoa_invert>:
 ae2:	fa 01       	movw	r30, r20
 ae4:	aa 27       	eor	r26, r26
 ae6:	28 30       	cpi	r18, 0x08	; 8
 ae8:	51 f1       	breq	.+84     	; 0xb3e <__ultoa_invert+0x5c>
 aea:	20 31       	cpi	r18, 0x10	; 16
 aec:	81 f1       	breq	.+96     	; 0xb4e <__ultoa_invert+0x6c>
 aee:	e8 94       	clt
 af0:	6f 93       	push	r22
 af2:	6e 7f       	andi	r22, 0xFE	; 254
 af4:	6e 5f       	subi	r22, 0xFE	; 254
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	af 4f       	sbci	r26, 0xFF	; 255
 afe:	b1 e0       	ldi	r27, 0x01	; 1
 b00:	3e d0       	rcall	.+124    	; 0xb7e <__ultoa_invert+0x9c>
 b02:	b4 e0       	ldi	r27, 0x04	; 4
 b04:	3c d0       	rcall	.+120    	; 0xb7e <__ultoa_invert+0x9c>
 b06:	67 0f       	add	r22, r23
 b08:	78 1f       	adc	r23, r24
 b0a:	89 1f       	adc	r24, r25
 b0c:	9a 1f       	adc	r25, r26
 b0e:	a1 1d       	adc	r26, r1
 b10:	68 0f       	add	r22, r24
 b12:	79 1f       	adc	r23, r25
 b14:	8a 1f       	adc	r24, r26
 b16:	91 1d       	adc	r25, r1
 b18:	a1 1d       	adc	r26, r1
 b1a:	6a 0f       	add	r22, r26
 b1c:	71 1d       	adc	r23, r1
 b1e:	81 1d       	adc	r24, r1
 b20:	91 1d       	adc	r25, r1
 b22:	a1 1d       	adc	r26, r1
 b24:	20 d0       	rcall	.+64     	; 0xb66 <__ultoa_invert+0x84>
 b26:	09 f4       	brne	.+2      	; 0xb2a <__ultoa_invert+0x48>
 b28:	68 94       	set
 b2a:	3f 91       	pop	r19
 b2c:	2a e0       	ldi	r18, 0x0A	; 10
 b2e:	26 9f       	mul	r18, r22
 b30:	11 24       	eor	r1, r1
 b32:	30 19       	sub	r19, r0
 b34:	30 5d       	subi	r19, 0xD0	; 208
 b36:	31 93       	st	Z+, r19
 b38:	de f6       	brtc	.-74     	; 0xaf0 <__ultoa_invert+0xe>
 b3a:	cf 01       	movw	r24, r30
 b3c:	08 95       	ret
 b3e:	46 2f       	mov	r20, r22
 b40:	47 70       	andi	r20, 0x07	; 7
 b42:	40 5d       	subi	r20, 0xD0	; 208
 b44:	41 93       	st	Z+, r20
 b46:	b3 e0       	ldi	r27, 0x03	; 3
 b48:	0f d0       	rcall	.+30     	; 0xb68 <__ultoa_invert+0x86>
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__ultoa_invert+0x5c>
 b4c:	f6 cf       	rjmp	.-20     	; 0xb3a <__ultoa_invert+0x58>
 b4e:	46 2f       	mov	r20, r22
 b50:	4f 70       	andi	r20, 0x0F	; 15
 b52:	40 5d       	subi	r20, 0xD0	; 208
 b54:	4a 33       	cpi	r20, 0x3A	; 58
 b56:	18 f0       	brcs	.+6      	; 0xb5e <__ultoa_invert+0x7c>
 b58:	49 5d       	subi	r20, 0xD9	; 217
 b5a:	31 fd       	sbrc	r19, 1
 b5c:	40 52       	subi	r20, 0x20	; 32
 b5e:	41 93       	st	Z+, r20
 b60:	02 d0       	rcall	.+4      	; 0xb66 <__ultoa_invert+0x84>
 b62:	a9 f7       	brne	.-22     	; 0xb4e <__ultoa_invert+0x6c>
 b64:	ea cf       	rjmp	.-44     	; 0xb3a <__ultoa_invert+0x58>
 b66:	b4 e0       	ldi	r27, 0x04	; 4
 b68:	a6 95       	lsr	r26
 b6a:	97 95       	ror	r25
 b6c:	87 95       	ror	r24
 b6e:	77 95       	ror	r23
 b70:	67 95       	ror	r22
 b72:	ba 95       	dec	r27
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__ultoa_invert+0x86>
 b76:	00 97       	sbiw	r24, 0x00	; 0
 b78:	61 05       	cpc	r22, r1
 b7a:	71 05       	cpc	r23, r1
 b7c:	08 95       	ret
 b7e:	9b 01       	movw	r18, r22
 b80:	ac 01       	movw	r20, r24
 b82:	0a 2e       	mov	r0, r26
 b84:	06 94       	lsr	r0
 b86:	57 95       	ror	r21
 b88:	47 95       	ror	r20
 b8a:	37 95       	ror	r19
 b8c:	27 95       	ror	r18
 b8e:	ba 95       	dec	r27
 b90:	c9 f7       	brne	.-14     	; 0xb84 <__ultoa_invert+0xa2>
 b92:	62 0f       	add	r22, r18
 b94:	73 1f       	adc	r23, r19
 b96:	84 1f       	adc	r24, r20
 b98:	95 1f       	adc	r25, r21
 b9a:	a0 1d       	adc	r26, r0
 b9c:	08 95       	ret

00000b9e <__prologue_saves__>:
 b9e:	2f 92       	push	r2
 ba0:	3f 92       	push	r3
 ba2:	4f 92       	push	r4
 ba4:	5f 92       	push	r5
 ba6:	6f 92       	push	r6
 ba8:	7f 92       	push	r7
 baa:	8f 92       	push	r8
 bac:	9f 92       	push	r9
 bae:	af 92       	push	r10
 bb0:	bf 92       	push	r11
 bb2:	cf 92       	push	r12
 bb4:	df 92       	push	r13
 bb6:	ef 92       	push	r14
 bb8:	ff 92       	push	r15
 bba:	0f 93       	push	r16
 bbc:	1f 93       	push	r17
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	cd b7       	in	r28, 0x3d	; 61
 bc4:	de b7       	in	r29, 0x3e	; 62
 bc6:	ca 1b       	sub	r28, r26
 bc8:	db 0b       	sbc	r29, r27
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	f8 94       	cli
 bce:	de bf       	out	0x3e, r29	; 62
 bd0:	0f be       	out	0x3f, r0	; 63
 bd2:	cd bf       	out	0x3d, r28	; 61
 bd4:	09 94       	ijmp

00000bd6 <__epilogue_restores__>:
 bd6:	2a 88       	ldd	r2, Y+18	; 0x12
 bd8:	39 88       	ldd	r3, Y+17	; 0x11
 bda:	48 88       	ldd	r4, Y+16	; 0x10
 bdc:	5f 84       	ldd	r5, Y+15	; 0x0f
 bde:	6e 84       	ldd	r6, Y+14	; 0x0e
 be0:	7d 84       	ldd	r7, Y+13	; 0x0d
 be2:	8c 84       	ldd	r8, Y+12	; 0x0c
 be4:	9b 84       	ldd	r9, Y+11	; 0x0b
 be6:	aa 84       	ldd	r10, Y+10	; 0x0a
 be8:	b9 84       	ldd	r11, Y+9	; 0x09
 bea:	c8 84       	ldd	r12, Y+8	; 0x08
 bec:	df 80       	ldd	r13, Y+7	; 0x07
 bee:	ee 80       	ldd	r14, Y+6	; 0x06
 bf0:	fd 80       	ldd	r15, Y+5	; 0x05
 bf2:	0c 81       	ldd	r16, Y+4	; 0x04
 bf4:	1b 81       	ldd	r17, Y+3	; 0x03
 bf6:	aa 81       	ldd	r26, Y+2	; 0x02
 bf8:	b9 81       	ldd	r27, Y+1	; 0x01
 bfa:	ce 0f       	add	r28, r30
 bfc:	d1 1d       	adc	r29, r1
 bfe:	0f b6       	in	r0, 0x3f	; 63
 c00:	f8 94       	cli
 c02:	de bf       	out	0x3e, r29	; 62
 c04:	0f be       	out	0x3f, r0	; 63
 c06:	cd bf       	out	0x3d, r28	; 61
 c08:	ed 01       	movw	r28, r26
 c0a:	08 95       	ret

00000c0c <_exit>:
 c0c:	f8 94       	cli

00000c0e <__stop_program>:
 c0e:	ff cf       	rjmp	.-2      	; 0xc0e <__stop_program>
